#include <gtest/gtest.h>
#include <iostream>

#include "../../main/models/GroupUpdater.h"

namespace {
class DummyUpdater : public ModelGradientUpdater{
  public:
    DummyUpdater(){
      counter = 0;
    }
    void update(RecDat* rec_dat, double gradient){
      counter++;
    }
    //TODO test beginning, end: ezeknek a pozitiv mintaval kell meghivodnia mindenek elott/utan
    void beginning_of_updating_cycle(RecDat*){} //before the first update call for any gradient updater, the parameter is the positive sample
    void end_of_updating_cycle(RecDat*){} //befejezodott a gradiens frissites egy userre egy pozitiv es a hozza tartozo negativ mintakra minden gradiens updaterre, the parameter is the positive sample
    int counter;
};
class DummyGradientComputer : public GradientComputer{
  public:
    DummyGradientComputer(){
      counter=5;
    }
    void set_up(vector<RecDat>*){}
    vector<pair<RecDat*,double> >* get_next_gradient(){
      return &gradients;
    }
    bool has_next(){
      counter--;
      return counter;
    }
    vector<pair<RecDat*,double> > gradients;
    int counter;
};

class TestGroupUpdater : public ::testing::Test { 
  public:
    DummyUpdater updater1;
    DummyUpdater updater2;
    DummyUpdater updater3;
    vector<ModelGradientUpdater*> updaters;
    DummyGradientComputer gradient_computer;
    vector<RecDat> rec_dats;
    TestGroupUpdater(){}
    virtual ~TestGroupUpdater(){}
    virtual void SetUp(){
      updaters.push_back(&updater1);
      updaters.push_back(&updater2);
      updaters.push_back(&updater3);
      gradient_computer.gradients.push_back(
        make_pair(create_rec_dat(1,2),0.7));
      gradient_computer.gradients.push_back(
        make_pair(create_rec_dat(1,4),0.8));
      gradient_computer.gradients.push_back(
        make_pair(create_rec_dat(1,6),0.9));
    }
    virtual void TearDown(){
    }
    RecDat* create_rec_dat(int user, int item){
       RecDat rec_dat;
       rec_dat.user = user;
       rec_dat.item = item;
       rec_dats.push_back(rec_dat);
       return &(rec_dats[rec_dats.size()-1]);
    }
};


}

TEST_F(TestGroupUpdater, test){
  RecDat positive;
  positive.user = 1;
  int cost = GroupUpdater::update_gradient_updaters(&positive, &gradient_computer, &updaters);
  EXPECT_EQ(12,cost);
  EXPECT_EQ(12,updater1.counter);
  EXPECT_EQ(12,updater2.counter);
  EXPECT_EQ(12,updater3.counter);
}


int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
