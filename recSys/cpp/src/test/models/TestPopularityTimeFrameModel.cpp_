#include <gtest/gtest.h>
#include "../../main/models/PopularityTimeFrameModel.h"
#include "../../main/updaters/PopularityTimeFrameModelUpdater.h"
#include "../../main/online_learners/SimpleLearner.h"

namespace {
class TestPopularityTimeFrameModel : public ::testing::Test { 
  public:
    vector<RecDat*> recDats;
    PopularityTimeFrameModel * model;
    PopularityTimeFrameModelUpdater * updater;
    SimpleLearner * learner;

    TestPopularityTimeFrameModel(){}
    virtual ~TestPopularityTimeFrameModel(){}
    virtual void SetUp(){
      PopularityTimeFrameModelParameters params;
      params.tau=10.0;
      model = new PopularityTimeFrameModel(&params);
      updater = new PopularityTimeFrameModelUpdater();
      learner = new SimpleLearner();

      updater->setModel(model);
      learner->setModel(model);
      learner->addSimpleUpdater(updater);
    }
    virtual void TearDown(){
      for (vector<RecDat*>::iterator it = recDats.begin();it!=recDats.end();it++){
        delete *it;
      }
      delete learner;
      delete updater;
      delete model;
    }
    RecDat* createRecDat(int user, int item, double time){
      RecDat* recDat = new RecDat;
      recDat -> user = user;
      recDat -> item = item;
      recDat -> time = time;
      recDats.push_back(recDat);
      return recDat;
    }
};
}
TEST_F(TestPopularityTimeFrameModel, modelsize){
  //add(recDat(user=u,item=i,time=t)) should inflate model.item to i+1
  model->add(createRecDat(1,100,0.0));
  ASSERT_GT(model->items.size(),100);
  EXPECT_EQ(0,model->items[100]);
  model->add(createRecDat(1000,10,0.0));
  ASSERT_GT(model->items.size(),100);
  EXPECT_EQ(0,model->items[10]);

}

TEST_F(TestPopularityTimeFrameModel, update){
  //updating: the counter of recDat::item should be increased and maxitem should be updated, old items should be removed
  RecDat* recDat = createRecDat(1,15,0.0);
  model->add(recDat);
  updater->update(recDat);
  EXPECT_EQ(1,model->maxitem);
  ASSERT_GT(model->items.size(),15);
  EXPECT_EQ(1,model->items[15]);
  EXPECT_EQ(0,model->items[14]);
  EXPECT_EQ(0,model->items[1]);
  recDat = createRecDat(3,15,3.0);
  model->add(recDat);
  updater->update(recDat);
  EXPECT_EQ(2,model->maxitem);
  ASSERT_GT(model->items.size(),15);
  EXPECT_EQ(2,model->items[15]);
  EXPECT_EQ(0,model->items[3]);
  recDat = createRecDat(5,1,4.2);
  model->add(recDat);
  updater->update(recDat);
  recDat = createRecDat(2,3,5.3);
  model->add(recDat);
  updater->update(recDat);
  EXPECT_EQ(2,model->maxitem);
  ASSERT_GT(model->items.size(),15);
  EXPECT_EQ(2,model->items[15]);
  recDat = createRecDat(2,1,11.0);
  model->add(recDat);
  updater->update(recDat);
  EXPECT_EQ(2,model->maxitem);
  ASSERT_GT(model->items.size(),15);
  EXPECT_EQ(2,model->items[1]);
  EXPECT_EQ(1,model->items[3]);
  EXPECT_EQ(1,model->items[15]);
}

TEST_F(TestPopularityTimeFrameModel, learn){
  learner->learn(createRecDat(5,20,0.0));
  EXPECT_EQ(model->maxitem,1);
  ASSERT_GT(model->items.size(), 20);
  EXPECT_EQ(model->items[20], 1);
  EXPECT_EQ(model->items[5], 0);
  learner->learn(createRecDat(3,20,1.0));
  learner->learn(createRecDat(5,13,1.5));
  learner->learn(createRecDat(8,20,3.0));
  learner->learn(createRecDat(5,20,3.1));
  learner->learn(createRecDat(4,4,3.2));
  EXPECT_EQ(model->maxitem,4);
  EXPECT_EQ(model->items[20], 4);
  EXPECT_EQ(model->items[4], 1);
  EXPECT_EQ(model->items[13], 1);
  learner->learn(createRecDat(2,1,20.0));
  EXPECT_EQ(model->maxitem,4);
  EXPECT_EQ(model->items[1],1);
  EXPECT_EQ(model->items[4],0);
  EXPECT_EQ(model->items[13],0);
  EXPECT_EQ(model->items[20],0);
}

TEST_F(TestPopularityTimeFrameModel, predict){
  learner->learn(createRecDat(5,20,1.0));
  learner->learn(createRecDat(12,20,2.0));
  learner->learn(createRecDat(25,20,3.0));
  EXPECT_EQ(model->prediction(createRecDat(30,20,4.0)),log(3+1)/log(3+1));
  EXPECT_EQ(model->prediction(createRecDat(3,12,4.0)),0.0);
}

int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
