#include <vector>
#include <gtest/gtest.h>
#include "../../main/online_learners/ImplicitGradientLearner.h"
#include "../../main/gradient_computers/GradientComputer.h"
//#include "../../main/gradient_computers/GradientComputerNdcg.h"
#include "../../main/objectives/ObjectiveMSE.h"
#include "../../main/objectives/ObjectiveBPR.h"
#include <typeinfo>

namespace GradientComputerTests{

  class DummyModel : public Model {
    public:
      DummyModel(){
        counter=0;
        for(int i=1; i<=5; i++){predictions.push_back(0.1/i);}
        predictVal = predictions.begin();
      }
      void add(RecDat* recDat){counter++;}
      virtual double prediction(RecDat * recDat){ return (*predictVal)*(recDat->item); }
      vector<pair<RecDat*,double> > gradientData;
      vector<double> predictions;
      vector<double>::iterator predictVal;
      int counter;
  };

  class DummyModelGradientUpdater : public ModelGradientUpdater {
    public:
      DummyModelGradientUpdater(){counter=0;}
      void update(RecDat* recDat, double gradient){
        counter++;
        model->gradientData.push_back(make_pair(recDat,gradient));
        model->predictVal++;
        if(model->predictVal==model->predictions.end()) model->predictVal=model->predictions.begin();
      }
      void set_model(DummyModel * model_){model = model_;}
      DummyModel* model;
      int counter;
  };

  class DummySampleGenerator : public NegativeSampleGenerator {
    public:
      vector<int>* generate(RecDat* recDat){
        samples.clear();
        samples.push_back(2);
        samples.push_back(4);
        return &samples;
      }
  };

  class ObjectiveDummyListWise : public ObjectiveListWise {
    public:
      vector<double> get_gradient(vector <RecPred> * predictions){
        vector<double> gradients;
        gradients.resize(predictions->size(),0);
        for(uint i=0;i<gradients.size();i++){
          gradients[i]=(predictions->at(i).prediction-predictions->at(i).score)*(i+1);
        }
        return gradients;
      }
  };
  class DummyModel2 : public Model {
    public:
      DummyModel2(){
        counter_=0;
      }
      void add(RecDat* recDat){counter_++;}
      virtual double prediction(RecDat * rec_dat){ return rec_dat->user+rec_dat->item; }
      int counter_;
  };

//  class DummyFactorModelWithCache : public FactorModelWithCache {
//    public:
//      DummyFactorModelWithCache(FactorModelWithCacheParameters *p) : FactorModelWithCache(p){
//        counter_=0;
//      }      
//      void add(RecDat* recDat){
//        counter_++;
//      }
//      void changeItemFactorCache(RecDat * recDat, vector<double> *oldVector, vector<double> *newVector){};
//      double getUserPredictionAverage(int user){return 0;}
//      virtual double prediction(RecDat * rec_dat){ return rec_dat->user+rec_dat->item; }
//      int counter_;
//  };
//
//  class DummyFactorModelWithCache2 : public FactorModelWithCache {
//    public:
//      DummyFactorModelWithCache2(FactorModelWithCacheParameters *p) : FactorModelWithCache(p){
//        counter_=0;
//      }
//      void add(RecDat* recDat){counter_++;cout << "add"<<endl;}
//      void changeItemFactorCache(RecDat * recDat, vector<double> *oldVector, vector<double> *newVector){};
//      // double getUserPredictionAverage(int user){return 0;}
//      // double getUserPredictionVariance(int user){return 1;}
//
//      virtual double prediction(RecDat * rec_dat){
//        return this->predictions[rec_dat->user-1][rec_dat->item-1];
//      }
//      int counter_;
//      vector<vector<double>> predictions;
//      void setPredictions(vector<vector<double>> pred_){
//        predictions=pred_;
//      }
//  };

  class DummyObjective : public ObjectivePointWise {
    double get_gradient(RecPred *rec_pred){ return rec_pred->score+rec_pred->prediction; }
  };


  class TestOfflineGradientComputerPointWise : public ::testing::Test  {
    public:
      vector<RecDat> rec_dats_;
      GradientComputerPointWise gradient_computer_;
      DummyModel2 model_;
      DummyObjective objective_;
      TestOfflineGradientComputerPointWise() {
      }
      virtual ~TestOfflineGradientComputerPointWise() {
        // You can do clean-up work that doesn't throw exceptions here.
      }
      virtual void SetUp(){
      }
      virtual void TearDown(){
      }
      RecDat* createRecDat(int user, int item, double time, double score){
        RecDat recDat;
        recDat.user = user;
        recDat.item = item;
        recDat.time = time;
        recDat.score = score;
        rec_dats_.push_back(recDat);
        return &rec_dats_[rec_dats_.size()-1];
      }

  };
}

using namespace GradientComputerTests;

class TestGradientComputer : public ::testing::Test  {
  public:
    ImplicitGradientLearner learner;
    DummyModel model;
    DummyModel2 model2;
    // FactorModelWithCacheParameters params;
    // DummyFactorModelWithCache cacheModel=DummyFactorModelWithCache(&params);
    // DummyFactorModelWithCache2 cacheModel2=DummyFactorModelWithCache2(&params);
    DummyModelGradientUpdater updater;
    SpMatrix trainMatrix;
    GradientComputer* gradientComputer;
    DummySampleGenerator negSampleGenerator;
    ObjectiveMSE objectiveMSE;
    ObjectiveBPR objectiveBPR;
    ObjectiveDummyListWise objectiveDummyListWise;

    vector<RecDat*> recDats;
    TestGradientComputer() {
    }
    virtual ~TestGradientComputer() {
      // You can do clean-up work that doesn't throw exceptions here.
    }
    virtual void SetUp(){
      updater.set_model(&model);
      learner.set_model(&model);
      learner.add_gradient_updater(&updater);
      learner.set_train_matrix(&trainMatrix);
      learner.set_negative_sample_generator(&negSampleGenerator);
    }
    virtual void TearDown(){
      for (vector<RecDat*>::iterator it = recDats.begin();it!=recDats.end();it++){
        delete *it;
      }
      delete gradientComputer;
    }
    RecDat* createRecDat(int user, int item, double time, double score){
      RecDat* recDat = new RecDat;
      recDat -> user = user;
      recDat -> item = item;
      recDat -> time = time;
      recDat -> score = score;
      recDats.push_back(recDat);
      return recDat;
    }
};


TEST_F(TestGradientComputer, pointwise) {
  GradientComputerPointWise* gradientComputer = new GradientComputerPointWise();
  gradientComputer->set_objective(&objectiveMSE);
  gradientComputer->set_model(&model);
  learner.set_gradient_computer(gradientComputer);

  learner.update(createRecDat(1,5,1.1,1.0));
  EXPECT_EQ(1,model.counter);
  EXPECT_EQ(3,updater.counter);
  EXPECT_EQ(3,model.gradientData.size());
  EXPECT_EQ(5,model.gradientData[0].first->item);
  EXPECT_EQ(1,model.gradientData[0].first->score);
  EXPECT_EQ(1,model.gradientData[0].first->user);
  EXPECT_DOUBLE_EQ(5*0.1/1-1.0,model.gradientData[0].second);
  EXPECT_EQ(2,model.gradientData[1].first->item);
  EXPECT_EQ(0,model.gradientData[1].first->score);
  EXPECT_EQ(1,model.gradientData[1].first->user);
  EXPECT_DOUBLE_EQ(2*0.1/2-0.0,model.gradientData[1].second);
  EXPECT_EQ(4,model.gradientData[2].first->item);
  EXPECT_EQ(0,model.gradientData[2].first->score);
  EXPECT_EQ(1,model.gradientData[2].first->user);
  EXPECT_DOUBLE_EQ(4*0.1/3-0.0,model.gradientData[2].second);
  EXPECT_DOUBLE_EQ(1*0.1/4,model.prediction(createRecDat(1,1,1.1,1.0)));
  learner.update(createRecDat(2,1,1.1,1.0));
  EXPECT_EQ(2,model.counter);
  EXPECT_EQ(6,updater.counter);
  EXPECT_EQ(6,model.gradientData.size());
  EXPECT_EQ(1,model.gradientData[3].first->item);
  EXPECT_EQ(1,model.gradientData[3].first->score);
  EXPECT_EQ(2,model.gradientData[3].first->user);
  EXPECT_DOUBLE_EQ(1*0.1/4-1.0,model.gradientData[3].second);
  EXPECT_EQ(2,model.gradientData[4].first->item);
  EXPECT_EQ(0,model.gradientData[4].first->score);
  EXPECT_EQ(2,model.gradientData[4].first->user);
  EXPECT_DOUBLE_EQ(2*0.1/5-0.0,model.gradientData[4].second);
  EXPECT_EQ(4,model.gradientData[5].first->item);
  EXPECT_EQ(0,model.gradientData[5].first->score);
  EXPECT_EQ(2,model.gradientData[5].first->user);
  EXPECT_DOUBLE_EQ(4*0.1/1-0.0,model.gradientData[5].second);
  EXPECT_DOUBLE_EQ(3*0.1/2,model.prediction(createRecDat(1,3,1.1,1.0)));
}

//TEST_F(TestGradientComputer, ndcg) {
//  GradientComputerNdcg* gc1 = new GradientComputerNdcg();
//  gc1->selfTest();
//
//  //CDF
//  double xLeq05 = 0.691462;
//  double xLeq25 = 0.99379;
//  double xLeqm05 = 0.308538;
//  double xLeqm25 = 0.00620967;
//
//  ASSERT_LE(abs(gc1->quadraticCdfEstimate(0.5)-xLeq05), 0.01);
//  ASSERT_LE(abs(gc1->quadraticCdfEstimate(2.5)-xLeq25), 0.01);
//  ASSERT_LE(abs(gc1->quadraticCdfEstimate(-0.5)-xLeqm05), 0.01);
//  ASSERT_LE(abs(gc1->quadraticCdfEstimate(-2.5)-xLeqm25), 0.01);
//  ASSERT_LE(abs(gc1->quadraticCdfEstimate(0)-0.5), 0.1);
//  
//  //CDF'
//  for(int i=-30; i<30; i++){
//    float p = (float)i/10;
//    float diffe = (gc1->quadraticCdfEstimate(p+0.001)-gc1->quadraticCdfEstimate(p))/0.001;
//    float diff = gc1->quadraticCdfEstimateDerivate(p);
//    ASSERT_LE(abs(diffe-diff),0.01);
//  }
//
//  //getEstimatedPredictedRank
//  ASSERT_EQ(1,gc1->getEstimatedPredictedRank(2.4,10));
//  ASSERT_LE(abs(gc1->getEstimatedPredictedRank(-2.4,10)-10),0.01);
//
//  //seenitems, avg, var
//  GradientComputerNdcg* gc2 = new GradientComputerNdcg();
//  gradientComputer = gc2;
//  FactorModelWithCacheParameters params;
//  params.beginMin=-0.01;
//  params.beginMax=0.01;
//  params.dimension=10;
//  params.initializeAll=false;
//
//  FactorModelWithCache *cacheModel=new DummyFactorModelWithCache(&params);
//  gc2->set_model(cacheModel);
//  learner.set_gradient_computer(gc2);
//  gc2->selfTest();
//
//  learner.learn(createRecDat(1,5,1.1,1.0));
//  learner.learn(createRecDat(1,4,1.1,1.0));
//  learner.learn(createRecDat(1,3,1.1,1.0));
//  learner.learn(createRecDat(1,2,1.1,1.0));
//  learner.learn(createRecDat(1,1,1.1,1.0));
//  EXPECT_EQ(5,gc2->seenItems.size());
//
//  // ezt mÃ¡r a modellben kell tesztelni
//  // EXPECT_DOUBLE_EQ(4,gc2->getUserPredictionAverage(1));
//  RecDat* dat = createRecDat(1,1,1.1,1.0);
//  EXPECT_DOUBLE_EQ(pow(2,1.0/2),gc2->getUserPredictionVariance(dat,4.0));
//
//  //get_gradient
//  RecDat* example = new RecDat();
//  example->user=1;
//  example->item=5;
//  example->score=0.0;
//  double pos1 = gc2->get_gradient(example);
//  //legyen pozitÃ­v
//  EXPECT_LE(0,pos1);
//
//  example->score=1.0;
//  double neg1 = gc2->get_gradient(example);
//  //legyen negatÃ­v
//  EXPECT_GE(0,neg1);
//
//  example->user=1;
//  example->item=1;
//  example->score=0.0;
//  double pos2 = gc2->get_gradient(example);
//  //legyen pozitÃ­v
//  EXPECT_LE(0,pos2);
//
//  example->score=1.0;
//  double neg2 = gc2->get_gradient(example);
//  //legyen negatÃ­v
//  EXPECT_GE(0,neg2);
//
//  //az aktuÃ¡lis score-tÃ³l fÃ¼ggÅen mon. nÃ¶vekszik
//  //pos1 scoreja: 1+5=6
//  //pos2 scoreja: 1+1=2
//  EXPECT_LE(pos2,pos1);
//  gc2->positive_coefficient_=0;
//  gc2->negative_coefficient_=0;
//  double z1 = gc2->get_gradient(createRecDat(1,5,1.1,1.0));
//  double z2 = gc2->get_gradient(createRecDat(1,5,1.1,0.0));
//  gc2->negative_coefficient_=1;
//  gc2->positive_coefficient_=1;
//  double z3 = gc2->get_gradient(createRecDat(1,5,1.1,1.0));
//  double z4 = gc2->get_gradient(createRecDat(1,5,1.1,0.0));
//  EXPECT_TRUE(z1==0 && z2==0 && z3 != 0 && z4 != 0);
//
//  gc2->positive_coefficient_=0;
//  gc2->negative_coefficient_=0;
//
//  gc2->score_regularization_=0;
//  double sr1 = gc2->get_gradient(createRecDat(1,5,1.1,1.0));
//  double sr2 = gc2->get_gradient(createRecDat(1,5,1.1,0.0));
//  EXPECT_TRUE(sr1==0 && sr2==0);
//
//
//  gc2->score_regularization_=1;
//  double sr3 = gc2->get_gradient(createRecDat(1,5,1.1,1.0));
//  double sr4 = gc2->get_gradient(createRecDat(1,5,1.1,0.0));
//  EXPECT_TRUE(sr3!=0 && sr4!=0);
//}

// TEST_F(TestGradientComputer, pairwise) {
//   gradientComputer = new GradientComputerImplicitPairWise(&objectiveBPR);
//   gradientComputer->set_model(&model);
//   learner.set_gradient_computer(gradientComputer);

//   learner.learn(createRecDat(1,5,1.1,1.0));
//   EXPECT_EQ(1,model.counter);
//   EXPECT_EQ(4,updater.counter);
//   ASSERT_EQ(4,model.gradientData.size());
//   double pred1 = 5*0.1/1;
//   double pred2 = 2*0.1/1;
//   double gradient = -1.0/(1.0+exp(pred1-pred2));
//   EXPECT_EQ(5,model.gradientData[0].first->item);
//   EXPECT_EQ(1,model.gradientData[0].first->score);
//   EXPECT_EQ(1,model.gradientData[0].first->user);
//   EXPECT_DOUBLE_EQ(gradient,model.gradientData[0].second);
//   EXPECT_EQ(2,model.gradientData[1].first->item);
//   EXPECT_EQ(0,model.gradientData[1].first->score);
//   EXPECT_EQ(1,model.gradientData[1].first->user);
//   EXPECT_DOUBLE_EQ(-gradient,model.gradientData[1].second);
//   pred1 = 5*0.1/3;
//   pred2 = 4*0.1/3;
//   gradient = -1.0/(1.0+exp(pred1-pred2));
//   EXPECT_EQ(5,model.gradientData[2].first->item);
//   EXPECT_EQ(1,model.gradientData[2].first->score);
//   EXPECT_EQ(1,model.gradientData[2].first->user);
//   EXPECT_DOUBLE_EQ(gradient,model.gradientData[2].second);
//   EXPECT_EQ(4,model.gradientData[3].first->item);
//   EXPECT_EQ(0,model.gradientData[3].first->score);
//   EXPECT_EQ(1,model.gradientData[3].first->user);
//   EXPECT_DOUBLE_EQ(-gradient,model.gradientData[3].second);
//   EXPECT_DOUBLE_EQ(1*0.1/5,model.prediction(createRecDat(1,1,1.1,1.0)));
//   learner.learn(createRecDat(2,1,1.1,1.0));
//   EXPECT_EQ(2,model.counter);
//   EXPECT_EQ(8,updater.counter);
//   ASSERT_EQ(8,model.gradientData.size());
//   pred1 = 1*0.1/5;
//   pred2 = 2*0.1/5;
//   gradient = -1.0/(1.0+exp(pred1-pred2));
//   EXPECT_EQ(1,model.gradientData[4].first->item);
//   EXPECT_EQ(1,model.gradientData[4].first->score);
//   EXPECT_EQ(2,model.gradientData[4].first->user);
//   EXPECT_DOUBLE_EQ(gradient,model.gradientData[4].second);
//   EXPECT_EQ(2,model.gradientData[5].first->item);
//   EXPECT_EQ(0,model.gradientData[5].first->score);
//   EXPECT_EQ(2,model.gradientData[5].first->user);
//   EXPECT_DOUBLE_EQ(-gradient,model.gradientData[5].second);
//   pred1 = 1*0.1/2;
//   pred2 = 4*0.1/2;
//   gradient = -1.0/(1.0+exp(pred1-pred2));
//   EXPECT_EQ(1,model.gradientData[6].first->item);
//   EXPECT_EQ(1,model.gradientData[6].first->score);
//   EXPECT_EQ(2,model.gradientData[6].first->user);
//   EXPECT_DOUBLE_EQ(gradient,model.gradientData[6].second);
//   EXPECT_EQ(4,model.gradientData[7].first->item);
//   EXPECT_EQ(0,model.gradientData[7].first->score);
//   EXPECT_EQ(2,model.gradientData[7].first->user);
//   EXPECT_DOUBLE_EQ(-gradient,model.gradientData[7].second);
//   EXPECT_DOUBLE_EQ(3*0.1/4,model.prediction(createRecDat(1,3,1.1,1.0)));
// }

// TEST_F(TestGradientComputer, listwise) {
//   gradientComputer = new GradientComputerListWise(&objectiveDummyListWise);
//   gradientComputer->set_model(&model);
//   learner.set_gradient_computer(gradientComputer);

//   learner.learn(createRecDat(1,5,1.1,1.0));
//   EXPECT_EQ(1,model.counter);
//   EXPECT_EQ(3,updater.counter);
//   ASSERT_EQ(3,model.gradientData.size());
//   EXPECT_EQ(5,model.gradientData[0].first->item);
//   EXPECT_EQ(1,model.gradientData[0].first->score);
//   EXPECT_EQ(1,model.gradientData[0].first->user);
//   EXPECT_DOUBLE_EQ((5*0.1/1-1.0)*1,model.gradientData[0].second);
//   EXPECT_EQ(2,model.gradientData[1].first->item);
//   EXPECT_EQ(0,model.gradientData[1].first->score);
//   EXPECT_EQ(1,model.gradientData[1].first->user);
//   EXPECT_DOUBLE_EQ((2*0.1/1-0.0)*2,model.gradientData[1].second);
//   EXPECT_EQ(4,model.gradientData[2].first->item);
//   EXPECT_EQ(0,model.gradientData[2].first->score);
//   EXPECT_EQ(1,model.gradientData[2].first->user);
//   EXPECT_DOUBLE_EQ((4*0.1/1-0.0)*3,model.gradientData[2].second);
//   EXPECT_DOUBLE_EQ(1*0.1/4,model.prediction(createRecDat(1,1,1.1,1.0)));
//   learner.learn(createRecDat(2,1,1.1,1.0));
//   EXPECT_EQ(2,model.counter);
//   EXPECT_EQ(6,updater.counter);
//   ASSERT_EQ(6,model.gradientData.size());
//   EXPECT_EQ(1,model.gradientData[3].first->item);
//   EXPECT_EQ(1,model.gradientData[3].first->score);
//   EXPECT_EQ(2,model.gradientData[3].first->user);
//   EXPECT_DOUBLE_EQ((1*0.1/4-1.0)*1,model.gradientData[3].second);
//   EXPECT_EQ(2,model.gradientData[4].first->item);
//   EXPECT_EQ(0,model.gradientData[4].first->score);
//   EXPECT_EQ(2,model.gradientData[4].first->user);
//   EXPECT_DOUBLE_EQ((2*0.1/4-0.0)*2,model.gradientData[4].second);
//   EXPECT_EQ(4,model.gradientData[5].first->item);
//   EXPECT_EQ(0,model.gradientData[5].first->score);
//   EXPECT_EQ(2,model.gradientData[5].first->user);
//   EXPECT_DOUBLE_EQ((4*0.1/4-0.0)*3,model.gradientData[5].second);
//   EXPECT_DOUBLE_EQ(3*0.1/2,model.prediction(createRecDat(1,3,1.1,1.0)));
// }
// TEST_F(TestOfflineGradientComputerPointWise, pointwise) {
//   //EXPECT_FALSE(gradient_computer_.selfTest());
//   gradient_computer_.set_model(&model_);
//   gradient_computer_.set_objective(&objective_);
//   //EXPECT_TRUE(gradient_computer_.selfTest());
//   double gradient = gradient_computer_.get_gradient(createRecDat(1,2,3.0,5.0));
//   EXPECT_DOUBLE_EQ(1+2+5.0, gradient);
//   EXPECT_EQ(0,model_.counter_);
// }

int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

