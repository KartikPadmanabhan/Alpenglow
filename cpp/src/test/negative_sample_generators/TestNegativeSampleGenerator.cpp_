#include <vector>
#include <gtest/gtest.h>
#include "../../main/negative_sample_generators/NegativeSampleGenerator.h"
#include "../../main/negative_sample_generators/UniformNegativeSampleGenerator.h"

namespace {

class TestUniformNegativeSampleGenerator : public ::testing::Test  {
public:
  UniformNegativeSampleGenerator * negSampleGenerator;
  SpMatrix trainMatrix;
  vector<int> items;
  vector<int> itemMap;
  vector<RecDat*> recDats;
  TestUniformNegativeSampleGenerator() {
  }
  virtual ~TestUniformNegativeSampleGenerator() {
    // You can do clean-up work that doesn't throw exceptions here.
  }
  virtual void SetUp(){
    UniformNegativeSampleGeneratorParameters parameters;
    parameters.negative_rate = 5;
    parameters.initialize_all = false;
    negSampleGenerator = new UniformNegativeSampleGenerator(&parameters);
    negSampleGenerator->set_train_matrix(&trainMatrix);
    negSampleGenerator->set_items(&items);
    srand(34723892);
    learn(createRecDat(1,1,1.0));
    learn(createRecDat(1,2,1.0));
    learn(createRecDat(1,4,1.0));
    learn(createRecDat(1,6,1.0));
    learn(createRecDat(1,7,1.0));
    learn(createRecDat(1,8,1.0));
    learn(createRecDat(1,9,1.0));
    learn(createRecDat(2,2,1.0));
    learn(createRecDat(2,5,1.0));
    learn(createRecDat(3,4,1.0));
    learn(createRecDat(3,6,1.0));
    learn(createRecDat(3,7,1.0));
    learn(createRecDat(3,9,1.0));
    learn(createRecDat(5,6,1.0));
    learn(createRecDat(6,1,1.0));
    learn(createRecDat(6,4,1.0));
    learn(createRecDat(6,5,1.0));
    learn(createRecDat(6,7,1.0));
    learn(createRecDat(6,8,1.0));
    learn(createRecDat(6,9,1.0));
  }
  virtual void TearDown(){
    delete negSampleGenerator;
  }
  RecDat* createRecDat(int user, int item, double score){
      RecDat* recDat = new RecDat;
      recDat -> user = user;
      recDat -> item = item;
      recDat -> score = score;
      recDats.push_back(recDat);
      return recDat;
  }
  void learn(RecDat* recDat){
    if ((int)itemMap.size()<=recDat->item) itemMap.resize(recDat->item+1);
    if (itemMap[recDat->item]==0) items.push_back(recDat->item);
    itemMap[recDat->item]=1;
    trainMatrix.update(recDat->user,recDat->item,recDat->score);
  }
  bool subset(vector<int> set, vector<int> subset){
    //True if subset is subset of set.
    for(int subindex=0; subindex<subset.size(); subindex++){
      int index;
      for(index=0; index<set.size();index++){
        if(subset[subindex]==set[index]){break;}
      }
      if(index==set.size()) return false;
    }
    return true;
  }
};
class TestUniformNegativeSampleGenerator2 : public ::testing::Test  {
public:
  UniformNegativeSampleGenerator * negSampleGenerator;
  SpMatrix trainMatrix;
  vector<RecDat*> recDats;
  TestUniformNegativeSampleGenerator2() {
  }
  virtual ~TestUniformNegativeSampleGenerator2() {
    // You can do clean-up work that doesn't throw exceptions here.
  }
  virtual void SetUp(){
    UniformNegativeSampleGeneratorParameters parameters;
    parameters.negative_rate = 5;
    parameters.initialize_all = true;
    parameters.max_item = 9;
    negSampleGenerator = new UniformNegativeSampleGenerator(&parameters);
    negSampleGenerator->set_train_matrix(&trainMatrix);
    negSampleGenerator->set_items(NULL);
    srand(34723892);
    learn(createRecDat(1,1,1.0));
    learn(createRecDat(1,2,1.0));
    learn(createRecDat(1,4,1.0));
    learn(createRecDat(1,6,1.0));
    learn(createRecDat(1,7,1.0));
    learn(createRecDat(1,8,1.0));
    learn(createRecDat(1,9,1.0));
    learn(createRecDat(2,2,1.0));
    learn(createRecDat(2,5,1.0));
    learn(createRecDat(3,4,1.0));
    learn(createRecDat(3,6,1.0));
    learn(createRecDat(3,7,1.0));
    learn(createRecDat(3,9,1.0));
    learn(createRecDat(5,6,1.0));
    learn(createRecDat(6,1,1.0));
    learn(createRecDat(6,4,1.0));
    learn(createRecDat(6,5,1.0));
    learn(createRecDat(6,7,1.0));
    learn(createRecDat(6,8,1.0));
    learn(createRecDat(6,9,1.0));
  }
  virtual void TearDown(){
    delete negSampleGenerator;
  }
  RecDat* createRecDat(int user, int item, double score){
      RecDat* recDat = new RecDat;
      recDat -> user = user;
      recDat -> item = item;
      recDat -> score = score;
      recDats.push_back(recDat);
      return recDat;
  }
  void learn(RecDat* recDat){
    trainMatrix.update(recDat->user,recDat->item,recDat->score);
  }
  bool subset(vector<int> set, vector<int> subset){
    //True if subset is subset of set.
    for(int subindex=0; subindex<subset.size(); subindex++){
      int index;
      for(index=0; index<set.size();index++){
        if(subset[subindex]==set[index]){break;}
      }
      if(index==set.size()) return false;
    }
    return true;
  }
};
class TestUniformNegativeSampleGenerator3 : public ::testing::Test  {
public:
  UniformNegativeSampleGenerator* negSampleGenerator;
  SpMatrix trainMatrix;
  vector<int> items;
  vector<int> itemMap;
  vector<RecDat*> recDats;
  TestUniformNegativeSampleGenerator3() {
  }
  virtual ~TestUniformNegativeSampleGenerator3() {
    // You can do clean-up work that doesn't throw exceptions here.
  }
  virtual void SetUp(){
    UniformNegativeSampleGeneratorParameters parameters;
    parameters.negative_rate = 5;
    parameters.initialize_all = false;
    parameters.filter_repeats = true;
    negSampleGenerator = new UniformNegativeSampleGenerator(&parameters);
    negSampleGenerator->set_train_matrix(&trainMatrix);
    negSampleGenerator->set_items(&items);
    srand(34723892);
    learn(createRecDat(1,1,1.0));
    learn(createRecDat(1,2,1.0));
    learn(createRecDat(1,4,1.0));
    learn(createRecDat(1,6,1.0));
    learn(createRecDat(1,7,1.0));
    learn(createRecDat(1,8,1.0));
    learn(createRecDat(1,9,1.0));
    learn(createRecDat(2,2,1.0));
    learn(createRecDat(2,5,1.0));
    learn(createRecDat(3,4,1.0));
    learn(createRecDat(3,6,1.0));
    learn(createRecDat(3,7,1.0));
    learn(createRecDat(3,9,1.0));
    learn(createRecDat(5,6,1.0));
    learn(createRecDat(6,1,1.0));
    learn(createRecDat(6,4,1.0));
    learn(createRecDat(6,5,1.0));
    learn(createRecDat(6,7,1.0));
    learn(createRecDat(6,8,1.0));
    learn(createRecDat(6,9,1.0));
  }
  virtual void TearDown(){
    delete negSampleGenerator;
  }
  RecDat* createRecDat(int user, int item, double score){
      RecDat* recDat = new RecDat;
      recDat -> user = user;
      recDat -> item = item;
      recDat -> score = score;
      recDats.push_back(recDat);
      return recDat;
  }
  void learn(RecDat* recDat){
    if ((int)itemMap.size()<=recDat->item) itemMap.resize(recDat->item+1);
    if (itemMap[recDat->item]==0) items.push_back(recDat->item);
    itemMap[recDat->item]=1;
    trainMatrix.update(recDat->user,recDat->item,recDat->score);
  }
  bool subset(vector<int> set, vector<int> subset){
    //True if subset is subset of set.
    for(int subindex=0; subindex<subset.size(); subindex++){
      int index;
      for(index=0; index<set.size();index++){
        if(subset[subindex]==set[index]){break;}
      }
      if(index==set.size()) return false;
    }
    return true;
  }
  bool all_different(vector<int> samples){
    //True if all elements in the vector are pairwise distinct.
    for(uint i=0;i<samples.size();i++){
      for(uint j=0;j<i;j++){
        if(samples[i]==samples[j]) return false;
      }
    }
    return true;
  }
};
}

TEST_F(TestUniformNegativeSampleGenerator,general) {
  vector<int>* samples = negSampleGenerator->generate(createRecDat(5,4,1.0));
  EXPECT_EQ(5, samples->size());
  vector<int> set;
  set.push_back(1);set.push_back(2);set.push_back(5);set.push_back(7);
  set.push_back(8);set.push_back(9);
  EXPECT_TRUE(subset(set,*samples)) << "Negative sample contained illegal element.";
  samples = negSampleGenerator->generate(createRecDat(5,4,1.0));
}
TEST_F(TestUniformNegativeSampleGenerator,one) {
  vector<int>* samples = negSampleGenerator->generate(createRecDat(6,2,1.0));
  ASSERT_EQ(1, samples->size());
  EXPECT_EQ(6, samples->at(0));
}
TEST_F(TestUniformNegativeSampleGenerator,empty) {
  vector<int>* samples = negSampleGenerator->generate(createRecDat(1,5,1.0));
  EXPECT_EQ(0, samples->size());
}
TEST_F(TestUniformNegativeSampleGenerator,shorter) {
  vector<int>* samples = negSampleGenerator->generate(createRecDat(3,8,1.0));
  EXPECT_EQ(3, samples->size());
  vector<int> set;
  set.push_back(1);set.push_back(2);set.push_back(5);
  EXPECT_TRUE(subset(set,*samples)) << "Illegal element.";
}
TEST_F(TestUniformNegativeSampleGenerator,repeat) {
  vector<int>* samples = negSampleGenerator->generate(createRecDat(2,6,1.0));
  ASSERT_EQ(5, samples->size());
  vector<int> set;
  set.push_back(1);set.push_back(4);set.push_back(7);set.push_back(8);
  set.push_back(9);
  EXPECT_TRUE(subset(set,*samples)) << "Illegal element.";
}
TEST_F(TestUniformNegativeSampleGenerator2,test){
  vector<int> counter(10);
  for(int i=0;i<1000;i++){
      vector<int>* samples = negSampleGenerator->generate(createRecDat(4,0,1.0));
    for(int j=0;j<samples->size();j++){
      counter[samples->at(j)]++;
    }
  }
  EXPECT_EQ(0,counter[0]);
  for(int i=1;i<10;i++){
    EXPECT_LT(500,counter[i]);
    EXPECT_GT(600,counter[i]);
  }
}
TEST_F(TestUniformNegativeSampleGenerator3,test) {
  vector<int>* samples;
  vector<int> set;
  samples = negSampleGenerator->generate(createRecDat(1,4,1.0));
  EXPECT_EQ(1, samples->size());
  set.clear();set.push_back(5);
  EXPECT_TRUE(subset(set,*samples)) << "Negative sample contained illegal element.";
  EXPECT_TRUE(all_different(*samples)) << "Negative sample contained illegal element.";

  samples = negSampleGenerator->generate(createRecDat(1,5,1.0));
  EXPECT_EQ(0, samples->size());
  EXPECT_TRUE(all_different(*samples)) << "Negative sample contained illegal element.";

  samples = negSampleGenerator->generate(createRecDat(2,5,1.0));
  EXPECT_EQ(5, samples->size());
  set.clear();set.push_back(1);set.push_back(3);set.push_back(4);set.push_back(6);set.push_back(7);set.push_back(8);set.push_back(9);
  EXPECT_TRUE(subset(set,*samples)) << "Negative sample contained illegal element.";
  EXPECT_TRUE(all_different(*samples)) << "Negative sample contained illegal element.";

  samples = negSampleGenerator->generate(createRecDat(2,8,1.0));
  EXPECT_EQ(5, samples->size());
  set.clear();set.push_back(1);set.push_back(3);set.push_back(4);set.push_back(6);set.push_back(7);set.push_back(9);
  EXPECT_TRUE(subset(set,*samples)) << "Negative sample contained illegal element.";
  EXPECT_TRUE(all_different(*samples)) << "Negative sample contained illegal element.";

}
//TEST_F(TestUniformNegativeSampleGenerator3,one) {
//  vector<int>* samples = negSampleGenerator->generate(createRecDat(6,2,1.0));
//  ASSERT_EQ(1, samples->size());
//  EXPECT_EQ(6, samples->at(0));
//}
//TEST_F(TestUniformNegativeSampleGenerator3,empty) {
//  vector<int>* samples = negSampleGenerator->generate(createRecDat(1,5,1.0));
//  EXPECT_EQ(0, samples->size());
//}
//TEST_F(TestUniformNegativeSampleGenerator3,shorter) {
//  vector<int>* samples = negSampleGenerator->generate(createRecDat(3,8,1.0));
//  EXPECT_EQ(3, samples->size());
//  vector<int> set;
//  set.push_back(1);set.push_back(2);set.push_back(5);
//  EXPECT_TRUE(subset(set,*samples)) << "Illegal element.";
//}
//TEST_F(TestUniformNegativeSampleGenerator3,repeat) {
//  vector<int>* samples = negSampleGenerator->generate(createRecDat(2,6,1.0));
//  ASSERT_EQ(5, samples->size());
//  vector<int> set;
//  set.push_back(1);set.push_back(4);set.push_back(7);set.push_back(8);
//  set.push_back(9);
//  EXPECT_TRUE(subset(set,*samples)) << "Illegal element.";
//}
int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

