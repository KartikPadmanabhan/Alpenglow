#include <vector>
#include <gtest/gtest.h>
#include "../../main/online_learners/PeriodicImplicitGradientLearner.h"
#include "../../main/recommender_data/SimpleIterator.h"

namespace{
  struct DummyPeriodicImplicitGradientLearnerParameters : public PeriodicImplicitGradientLearnerParameters{
  };
  class DummyPeriodicImplicitGradientLearner : public PeriodicImplicitGradientLearner {
    public:
      DummyPeriodicImplicitGradientLearner(DummyPeriodicImplicitGradientLearnerParameters* params):PeriodicImplicitGradientLearner(params){
        generate_counter = 0;
      }
      ~DummyPeriodicImplicitGradientLearner(){}
      int generate_counter;
      vector<RecDat*> train_data;
    private:
      vector<RecDat*> generate_train_data(RecDat* rec_dat) override {
        generate_counter++;
        return train_data;
      }
  };
  class DummyUpdater: public ModelGradientUpdater{
    public:
      DummyUpdater(){
        counter = 0;
      }
      void update(RecDat* rec_dat, double gradient){
        if(rec_dat->score>0){
          rec_dats.push_back(*rec_dat);
        }
        counter++;
      }
      vector<RecDat> rec_dats;
      int counter;
  };

  class DummySampleGenerator : public NegativeSampleGenerator{
    public:
      DummySampleGenerator(){samples.push_back(1);samples.push_back(2);samples.push_back(3);}
      vector<int>* generate(RecDat * recDat){
        return &samples;
      }
  };
  class DummyGradientComputer : public GradientComputer{
    public:
      DummyGradientComputer(){
        has_next_var_ = false;
      }
      void set_up(vector<RecDat>* _train_data){
        trainData = _train_data;
        gradientVector.clear();
        for(uint i = 0;i<trainData->size(); i++){
          gradientVector.push_back(make_pair(&(trainData->at(i)),0.5));
        }
        has_next_var_ = true;
      }
      vector<pair<RecDat*,double> >* get_next_gradient(){ has_next_var_ = false; return &gradientVector;}
      bool has_next(){return has_next_var_;}
    private:
      bool has_next_var_;
  };
  class DummyLogger : public Logger {
    public:
      DummyLogger(){
        counter = 0;
      }
      void run(RecDat* rec_dat){
        counter++;
      }
      int counter;
  };
  class DummyModel: public Model{
    public:
      DummyModel(){
        writecounter = 0;
        readcounter = 0;
        clearcounter = 0;
      }
    void add(RecDat* recDat){}
    double prediction(RecDat* recDat){ return 0; }
    void write(ofstream& file){writecounter++;}
    void read(ifstream& file){readcounter++;}
    void clear(){clearcounter++;}
    int writecounter;
    int readcounter;
    int clearcounter;
  };
  class TestPeriodicImplicitGradientLearner : public ::testing::Test  {
    public:
      TestPeriodicImplicitGradientLearner(){}
      virtual ~TestPeriodicImplicitGradientLearner(){}
      virtual void SetUp(){
        rec_data.push_back(*create_rec_dat(5,6,10,1.0));
        rec_data.push_back(*create_rec_dat(7,8,31,1.0));
        rec_data.push_back(*create_rec_dat(9,4,112,1.0)); //learn itt
        rec_data.push_back(*create_rec_dat(6,7,113,1.0));
        rec_data.push_back(*create_rec_dat(3,4,216,1.0)); //itt egy kimarad, modellszamozas hogy koveti?
        rec_data.push_back(*create_rec_dat(3,4,416,1.0));
        recommender_data.setRecDats(rec_data);
      }
      virtual void TearDown(){
        for(uint i=0;i<rec_dats.size();i++){
          delete rec_dats[i];
        } 
      }
      vector<RecDat> rec_data;
      vector<RecDat*> rec_dats;
      RecommenderData recommender_data;
      DummyModel model;
      DummyGradientComputer gradient_computer;
      DummySampleGenerator neg_sample_generator;
      DummyUpdater updater1;
      DummyUpdater updater2;
      DummyUpdater updater3;
      DummyLogger logger1;
      DummyLogger logger2;
      DummyLogger logger3;
      RecDat* create_rec_dat(int user, int item, double time, double score){
        RecDat* rec_dat = new RecDat;
        rec_dat->user = user;
        rec_dat->item = item;
        rec_dat->time = time;
        rec_dat->score = score;
        rec_dats.push_back(rec_dat);
        return rec_dat;
      }
  };
}

TEST_F(TestPeriodicImplicitGradientLearner, test_dummy){
  DummyPeriodicImplicitGradientLearnerParameters dummy_params;
  dummy_params.period_length=100;
  dummy_params.start_time=-1; //ezt talalja ki magatol
  dummy_params.read_model=false;
  dummy_params.write_model=false;
  dummy_params.clear_model=false;
  dummy_params.seed = 1234;
  dummy_params.turn_off_random_shuffling = false; 
  dummy_params.number_of_iterations = 3;
  dummy_params.learn = true; 
  DummyPeriodicImplicitGradientLearner dummy_periodic_learner(&dummy_params);
  SimpleIterator iterator(&recommender_data);
  dummy_periodic_learner.set_model(&model);
  dummy_periodic_learner.set_recommender_data_iterator(&iterator);
  dummy_periodic_learner.set_negative_sample_generator(&neg_sample_generator);
  dummy_periodic_learner.set_gradient_computer(&gradient_computer);
  dummy_periodic_learner.add_gradient_updater(&updater1);
  dummy_periodic_learner.add_gradient_updater(&updater2);
  dummy_periodic_learner.add_gradient_updater(&updater3);
  dummy_periodic_learner.add_iteration_logger(&logger1);
  dummy_periodic_learner.add_iteration_logger(&logger2);
  dummy_periodic_learner.add_iteration_logger(&logger3);
  ASSERT_TRUE(dummy_periodic_learner.self_test());
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,2,3,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,4,3,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,1,3,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,5,3,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,3,3,4));
  dummy_periodic_learner.init();
  dummy_periodic_learner.self_test();
  RecDat* rec_dat = iterator.next(); //time=10
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(0,logger1.counter);
  EXPECT_EQ(0,logger2.counter);
  EXPECT_EQ(0,logger3.counter);
  EXPECT_EQ(0,updater1.counter);
  EXPECT_EQ(0,updater2.counter);
  EXPECT_EQ(0,updater3.counter);
  rec_dat = iterator.next(); //time=31
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(3,logger1.counter);
  EXPECT_EQ(3,logger2.counter);
  EXPECT_EQ(3,logger3.counter);
  EXPECT_EQ(3*4*5,updater1.counter);
  EXPECT_EQ(60,updater2.counter);
  EXPECT_EQ(60,updater3.counter);
  rec_dat = iterator.next(); //time=112
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(3,logger1.counter);
  EXPECT_EQ(3,logger2.counter);
  EXPECT_EQ(3,logger3.counter);
  EXPECT_EQ(3*4*5,updater1.counter);
  EXPECT_EQ(60,updater2.counter);
  EXPECT_EQ(60,updater3.counter);
  rec_dat = iterator.next(); //time=113
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(6,logger1.counter);
  EXPECT_EQ(6,logger2.counter);
  EXPECT_EQ(6,logger3.counter);
  EXPECT_EQ(120,updater1.counter);
  EXPECT_EQ(120,updater2.counter);
  EXPECT_EQ(120,updater3.counter);
  rec_dat = iterator.next(); //time=216
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(9,logger1.counter);
  EXPECT_EQ(9,logger2.counter);
  EXPECT_EQ(9,logger3.counter);
  EXPECT_EQ(180,updater1.counter);
  EXPECT_EQ(180,updater2.counter);
  EXPECT_EQ(180,updater3.counter);
  rec_dat = iterator.next(); //time=416
  dummy_periodic_learner.learn(rec_dat);

}
TEST_F(TestPeriodicImplicitGradientLearner, test_nolearn){
  DummyPeriodicImplicitGradientLearnerParameters dummy_params;
  dummy_params.period_length=100;
  dummy_params.start_time=-1; //ezt talalja ki magatol
  dummy_params.read_model=false;
  dummy_params.write_model=false;
  dummy_params.clear_model=false;
  dummy_params.seed = 1234;
  dummy_params.turn_off_random_shuffling = false;
  dummy_params.number_of_iterations = 3;
  dummy_params.learn = false;
  DummyPeriodicImplicitGradientLearner dummy_periodic_learner(&dummy_params);
  SimpleIterator iterator(&recommender_data);
  dummy_periodic_learner.set_model(&model);
  dummy_periodic_learner.set_recommender_data_iterator(&iterator);
  dummy_periodic_learner.set_negative_sample_generator(&neg_sample_generator);
  dummy_periodic_learner.set_gradient_computer(&gradient_computer);
  dummy_periodic_learner.add_gradient_updater(&updater1);
  dummy_periodic_learner.add_gradient_updater(&updater2);
  dummy_periodic_learner.add_gradient_updater(&updater3);
  dummy_periodic_learner.add_iteration_logger(&logger1);
  dummy_periodic_learner.add_iteration_logger(&logger2);
  dummy_periodic_learner.add_iteration_logger(&logger3);
  ASSERT_TRUE(dummy_periodic_learner.self_test());
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,2,3,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,4,3,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,1,3,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,5,3,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,3,3,4));
  RecDat* rec_dat = iterator.next(); //time=10
  dummy_periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=31
  dummy_periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=112
  dummy_periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=113
  dummy_periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=216
  dummy_periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=416
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(0,logger1.counter);
  EXPECT_EQ(0,logger2.counter);
  EXPECT_EQ(0,logger3.counter);
  EXPECT_EQ(0,updater1.counter);
  EXPECT_EQ(0,updater2.counter);
  EXPECT_EQ(0,updater3.counter);

}
TEST_F(TestPeriodicImplicitGradientLearner, test_noshuffle){
  DummyPeriodicImplicitGradientLearnerParameters dummy_params;
  dummy_params.period_length=100;
  dummy_params.start_time=-1; //ezt talalja ki magatol
  dummy_params.read_model=false;
  dummy_params.write_model=false;
  dummy_params.clear_model=false;
  dummy_params.seed = 1234;
  dummy_params.turn_off_random_shuffling = true;
  dummy_params.number_of_iterations = 3;
  dummy_params.learn = true;
  DummyPeriodicImplicitGradientLearner dummy_periodic_learner(&dummy_params);
  SimpleIterator iterator(&recommender_data);
  ASSERT_FALSE(dummy_periodic_learner.self_test());
  dummy_periodic_learner.set_model(&model);
  dummy_periodic_learner.set_recommender_data_iterator(&iterator);
  dummy_periodic_learner.set_negative_sample_generator(&neg_sample_generator);
  dummy_periodic_learner.set_gradient_computer(&gradient_computer);
  dummy_periodic_learner.add_gradient_updater(&updater1);
  dummy_periodic_learner.add_gradient_updater(&updater2);
  dummy_periodic_learner.add_gradient_updater(&updater3);
  ASSERT_TRUE(dummy_periodic_learner.self_test());
  dummy_periodic_learner.add_iteration_logger(&logger1);
  dummy_periodic_learner.add_iteration_logger(&logger2);
  dummy_periodic_learner.add_iteration_logger(&logger3);
  ASSERT_TRUE(dummy_periodic_learner.self_test());
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,2,13,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,4,23,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,1,33,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,5,43,4));
  dummy_periodic_learner.train_data.push_back(create_rec_dat(1,7,53,4));
  dummy_periodic_learner.init();
  dummy_periodic_learner.self_test();
  RecDat* rec_dat = iterator.next(); //time=10
  dummy_periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=31
  dummy_periodic_learner.learn(rec_dat);
  for(int i=0;i<15;i++){
    //cerr << "xxx " << i << endl;
    EXPECT_EQ(dummy_periodic_learner.train_data[i%5]->item,updater1.rec_dats[i].item);
    //cerr << dummy_periodic_learner.train_data[i%5]->item << " " << updater1.rec_dats[i].item << endl;
  }
  rec_dat = iterator.next(); //time=112
  dummy_periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=113
  dummy_periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=216
  dummy_periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=416
  dummy_periodic_learner.learn(rec_dat);

}
int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
