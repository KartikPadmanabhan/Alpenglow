#include <vector>
#include <gtest/gtest.h>
#include "../../main/online_learners/ImplicitGradientLearner.h"
#include "../../main/gradient_computers/GradientComputer.h"
#include "../../main/objectives/ObjectiveMSE.h"
#include "../../main/negative_sample_generators/UniformNegativeSampleGenerator.h"

namespace {

  class DummyModel : public Model {
    public:
      DummyModel(){data.clear(); counter=0; gradCounter=0.0;}
      void add(RecDat* recDat){counter++;}
      virtual double prediction(RecDat * recDat){ return 0.3+gradCounter; }
      vector<RecDat*> data;
      vector<pair<RecDat*,double> > gradientData;
      int counter;
      double gradCounter;
  };

  class DummyModelUpdater : public ModelSimpleUpdater {
    public:
      DummyModelUpdater(){counter=0;}
      void update(RecDat* recDat){
        counter++;
        (model->data).push_back(recDat);
      } 
      void set_model(DummyModel * model_){model = model_;}
      DummyModel * model;
      int counter;
  };

  class DummyModelGradientUpdater : public ModelGradientUpdater {
    public:
      DummyModelGradientUpdater(){counter=0;}
      void update(RecDat* recDat, double gradient){counter++; model->gradientData.push_back(make_pair(recDat,gradient)); model->gradCounter+=0.1*gradient;}
      void set_model(DummyModel * model_){model = model_;}
      DummyModel* model;
      int counter;
  };

  class DummySampleGenerator : public NegativeSampleGenerator {
    public:
      vector<int>* generate(RecDat* recDat){
        samples.clear();
        samples.push_back(2);
        samples.push_back(4);
        return &samples;
      }
  };

  class TestImplicitGradientLearner : public ::testing::Test  {
    public:
      ImplicitGradientLearner learner;
      DummyModel model;
      DummyModelUpdater updater1;
      DummyModelUpdater updater2;
      DummyModelUpdater updater3;
      DummyModelGradientUpdater grad1;
      DummyModelGradientUpdater grad2;
      DummyModelGradientUpdater grad3;
      SpMatrix trainMatrix;
      GradientComputerPointWise* gradientComputer;
      DummySampleGenerator negSampleGenerator;
      ObjectiveMSE objectiveMSE;

      vector<RecDat*> recDats;
      TestImplicitGradientLearner() {
      }
      virtual ~TestImplicitGradientLearner() {
        // You can do clean-up work that doesn't throw exceptions here.
      }
      virtual void SetUp(){
        updater1.set_model(&model);
        updater2.set_model(&model);
        updater3.set_model(&model);
        grad1.set_model(&model);
        grad2.set_model(&model);
        grad3.set_model(&model);
        learner.set_model(&model);
        learner.set_train_matrix(&trainMatrix);
        learner.set_negative_sample_generator(&negSampleGenerator);
        GradientComputerPointWise* gradientComputer = new GradientComputerPointWise();
        gradientComputer->set_objective(&objectiveMSE);
        gradientComputer->set_model(&model);
        learner.set_gradient_computer(gradientComputer);
      }
      virtual void TearDown(){
        for (vector<RecDat*>::iterator it = recDats.begin();it!=recDats.end();it++){
          delete *it;
        }
        delete gradientComputer;
      }
      RecDat* createRecDat(int user, int item, double time, double score){
        RecDat* recDat = new RecDat;
        recDat -> user = user;
        recDat -> item = item;
        recDat -> time = time;
        recDat -> score = score;
        recDats.push_back(recDat);
        return recDat;
      }

  };

}
TEST_F(TestImplicitGradientLearner, simpleUpdaters) {
  learner.add_simple_updater(&updater1);
  learner.add_simple_updater(&updater2);
  learner.add_simple_updater(&updater3);
  learner.update(createRecDat(1,1,1.0,1.0));
  EXPECT_EQ(1,model.counter);
  EXPECT_EQ(3,model.data.size());
  EXPECT_EQ(1,updater1.counter);
  EXPECT_EQ(1,updater2.counter);
  EXPECT_EQ(1,updater3.counter);
  EXPECT_EQ(1,(model.data[0])->user);
  EXPECT_EQ(1,(model.data[1])->user);
  EXPECT_EQ(1,(model.data[2])->user);
  EXPECT_EQ(1,(model.data[0])->item);
  EXPECT_EQ(1,(model.data[1])->item);
  EXPECT_EQ(1,(model.data[2])->item);

  learner.update(createRecDat(2,2,2.0,1.0));
  EXPECT_EQ(2,model.counter);
  EXPECT_EQ(6,model.data.size());
  EXPECT_EQ(2,updater1.counter);
  EXPECT_EQ(2,updater2.counter);
  EXPECT_EQ(2,updater3.counter);
  EXPECT_EQ(2,(model.data[3])->user);
  EXPECT_EQ(2,(model.data[4])->user);
  EXPECT_EQ(2,(model.data[5])->user);
  EXPECT_EQ(2,(model.data[3])->item);
  EXPECT_EQ(2,(model.data[4])->item);
  EXPECT_EQ(2,(model.data[5])->item);
}

TEST_F(TestImplicitGradientLearner, gradientUpdater) {
  learner.add_gradient_updater(&grad1);
  learner.update(createRecDat(1,5,1.1,1.0));
  EXPECT_EQ(1,model.counter);
  EXPECT_EQ(3,grad1.counter);
  EXPECT_EQ(0,model.data.size());
  EXPECT_EQ(3,model.gradientData.size());
  EXPECT_EQ(5,model.gradientData[0].first->item);
  EXPECT_EQ(1,model.gradientData[0].first->score);
  EXPECT_EQ(1,model.gradientData[0].first->user);
  EXPECT_DOUBLE_EQ(-0.7,model.gradientData[0].second);
  EXPECT_EQ(2,model.gradientData[1].first->item);
  EXPECT_EQ(0,model.gradientData[1].first->score);
  EXPECT_EQ(1,model.gradientData[1].first->user);
  EXPECT_DOUBLE_EQ(0.3-0.7*0.1,model.gradientData[1].second);
  EXPECT_EQ(4,model.gradientData[2].first->item);
  EXPECT_EQ(0,model.gradientData[2].first->score);
  EXPECT_EQ(1,model.gradientData[2].first->user);
  EXPECT_EQ(0.253,model.gradientData[2].second);
  EXPECT_DOUBLE_EQ(0.2783,model.prediction(createRecDat(1,1,1.1,1.0)));
  learner.update(createRecDat(2,1,1.1,1.0));
  EXPECT_EQ(2,model.counter);
  EXPECT_EQ(6,grad1.counter);
  EXPECT_DOUBLE_EQ(0.2494173,model.prediction(createRecDat(1,1,1.1,1.0)));
  learner.update(createRecDat(2,1,1.1,1.0));
  learner.update(createRecDat(2,1,1.1,1.0));
  learner.update(createRecDat(2,1,1.1,1.0));
  EXPECT_DOUBLE_EQ(0.091703065630454245,model.prediction(createRecDat(1,1,1.1,1.0)));
}

TEST_F(TestImplicitGradientLearner, gradientUpdaters) {
  learner.add_gradient_updater(&grad1);
  learner.add_gradient_updater(&grad2);
  learner.add_gradient_updater(&grad3);
  learner.update(createRecDat(1,5,1.1,1.0));
  EXPECT_EQ(1,model.counter);
  EXPECT_EQ(3,grad1.counter);
  EXPECT_EQ(3,grad2.counter);
  EXPECT_EQ(3,grad3.counter);
  EXPECT_DOUBLE_EQ(0.15210000000000007,model.prediction(createRecDat(1,1,1.1,1.0)));
  learner.update(createRecDat(2,1,1.1,1.0));
  EXPECT_EQ(2,model.counter);
  EXPECT_EQ(6,grad1.counter);
  EXPECT_EQ(6,grad2.counter);
  EXPECT_EQ(6,grad3.counter);
}
int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}

