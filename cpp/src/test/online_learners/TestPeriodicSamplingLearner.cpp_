#include <gtest/gtest.h>
#include "../../main/online_learners/PeriodicSamplingLearner.h"
#include "../../main/recommender_data/SimpleIterator.h"

namespace{
  class TestPeriodicSamplingLearner : public ::testing::Test  {
    public:
      TestPeriodicSamplingLearner(){}
      virtual ~TestPeriodicSamplingLearner(){}
      virtual void SetUp(){
        rec_data.push_back(*create_rec_dat(0,0));
        rec_data.push_back(*create_rec_dat(1,10));
        rec_data.push_back(*create_rec_dat(2,20));
        rec_data.push_back(*create_rec_dat(3,30));
        rec_data.push_back(*create_rec_dat(4,40));
        rec_data.push_back(*create_rec_dat(5,50));
        rec_data.push_back(*create_rec_dat(6,60));
        rec_data.push_back(*create_rec_dat(7,70));
        rec_data.push_back(*create_rec_dat(8,80));
        rec_data.push_back(*create_rec_dat(9,90));
        recommender_data.setRecDats(rec_data);
      }
      virtual void TearDown(){
        for(uint i=0;i<rec_dats.size();i++){
          delete rec_dats[i];
        } 
      }
      vector<RecDat> rec_data;
      vector<RecDat*> rec_dats;
      RecommenderData recommender_data;
      RecDat* create_rec_dat(int id, int time){
        RecDat* rec_dat = new RecDat;
        rec_dat->user = 10;
        rec_dat->item = 20;
        rec_dat->time = time;
        rec_dat->score = 1.0;
        rec_dat->id = id;
        rec_dats.push_back(rec_dat);
        return rec_dat;
      }
  };
}

TEST_F(TestPeriodicSamplingLearner, uniform){
  PeriodicSamplingLearnerParameters params;
  //params.period_length=100;
  //params.start_time=-1; //ezt talalja ki magatol
  //params.read_model=false;
  //params.write_model=false;
  //params.clear_model=false;
  params.seed = 1223434;
  //params.turn_off_random_shuffling = false; 
  //params.number_of_iterations = 3;
  //params.learn = true; 
  params.distribution = "uniform";
  params.number_of_samples = 10000;
  PeriodicSamplingLearner periodic_learner(&params);
  SimpleIterator iterator(&recommender_data);
  periodic_learner.set_recommender_data_iterator(&iterator);
  //ASSERT_TRUE(periodic_learner.self_test()); //wont be true as anchestors modules are not set
  RecDat* rec_dat = iterator.next(); //id = 0
  rec_dat = iterator.next(); //id = 1
  rec_dat = iterator.next(); //id = 2
  rec_dat = iterator.next(); //id = 3
  rec_dat = iterator.next(); //id = 4
  vector<RecDat*> samples = periodic_learner.generate_train_data(rec_dat);
  vector<int> distribution(5);
  EXPECT_EQ(10000,samples.size());
  for(uint i =0; i<samples.size(); i++){
    ASSERT_LT(samples[i]->id,5);
    distribution[samples[i]->id]++;
  }
  for(int i=0;i<5;i++){
    EXPECT_GT(samples.size()/5*1.1,distribution[i]);
    EXPECT_LT(samples.size()/5*0.9,distribution[i]);
  }
  rec_dat = iterator.next(); //id = 5
  rec_dat = iterator.next(); //id = 6
  rec_dat = iterator.next(); //id = 7
  rec_dat = iterator.next(); //id = 8
  rec_dat = iterator.next(); //id = 9
  samples = periodic_learner.generate_train_data(rec_dat);
  distribution.clear();
  distribution.resize(10);
  for(uint i =0; i<samples.size(); i++){
    ASSERT_LT(samples[i]->id,10);
    distribution[samples[i]->id]++;
  }
  for(int i=0;i<10;i++){
    //cerr << i << " " << distribution[i] << " " << (double)distribution[i]/distribution[0] << endl;
    EXPECT_GT(samples.size()/10*1.1,distribution[i]); 
    EXPECT_LT(samples.size()/10*0.9,distribution[i]);
  }

}

TEST_F(TestPeriodicSamplingLearner, linear){
  PeriodicSamplingLearnerParameters params;
  //params.period_length=100;
  //params.start_time=-1; //ezt talalja ki magatol
  //params.read_model=false;
  //params.write_model=false;
  //params.clear_model=false;
  params.seed = 1223434;
  //params.turn_off_random_shuffling = false; 
  //params.number_of_iterations = 3;
  //params.learn = true; 
  params.distribution = "linear";
  params.number_of_samples = 2500000;
  PeriodicSamplingLearner periodic_learner(&params);
  SimpleIterator iterator(&recommender_data);
  periodic_learner.set_recommender_data_iterator(&iterator);
  //ASSERT_TRUE(periodic_learner.self_test()); //wont be true as anchestors modules are not set
  RecDat* rec_dat = iterator.next(); //id = 0
  rec_dat = iterator.next(); //id = 1
  rec_dat = iterator.next(); //id = 2
  rec_dat = iterator.next(); //id = 3
  rec_dat = iterator.next(); //id = 4
  vector<RecDat*> samples = periodic_learner.generate_train_data(rec_dat);
  vector<int> distribution(5);
  EXPECT_EQ(2500000,samples.size());
  for(uint i =0; i<samples.size(); i++){
    ASSERT_LT(samples[i]->id,5);
    distribution[samples[i]->id]++;
  }
  for(int i=0;i<5;i++){
    //cerr << i << " " << distribution[i] << " " << (double)distribution[i]/distribution[0] << endl;
    EXPECT_GT(samples.size()/25*(1+2*i)*1.03,distribution[i]); 
    EXPECT_LT(samples.size()/25*(1+2*i)*0.97,distribution[i]);
  }
  rec_dat = iterator.next(); //id = 5
  rec_dat = iterator.next(); //id = 6
  rec_dat = iterator.next(); //id = 7
  rec_dat = iterator.next(); //id = 8
  rec_dat = iterator.next(); //id = 9
  samples = periodic_learner.generate_train_data(rec_dat);
  distribution.clear();
  distribution.resize(10);
  for(uint i =0; i<samples.size(); i++){
    ASSERT_LT(samples[i]->id,10);
    distribution[samples[i]->id]++;
  }
  for(int i=0;i<10;i++){
    //cerr << i << " " << distribution[i] << " " << (double)distribution[i]/distribution[0] << endl;
    EXPECT_GT(samples.size()/100*(1+2*i)*1.03,distribution[i]); 
    EXPECT_LT(samples.size()/100*(1+2*i)*0.97,distribution[i]);
  }
}
TEST_F(TestPeriodicSamplingLearner, arctg){
  PeriodicSamplingLearnerParameters params;
  //params.period_length=100;
  //params.start_time=-1; //ezt talalja ki magatol
  //params.read_model=false;
  //params.write_model=false;
  //params.clear_model=false;
  params.seed = 1223434;
  //params.turn_off_random_shuffling = false; 
  //params.number_of_iterations = 3;
  //params.learn = true; 
  params.distribution = "arctg";
  params.y = 10;
  params.number_of_samples = 10000;
  PeriodicSamplingLearner periodic_learner(&params);
  SimpleIterator iterator(&recommender_data);
  periodic_learner.set_recommender_data_iterator(&iterator);
  //ASSERT_TRUE(periodic_learner.self_test()); //wont be true as anchestors modules are not set
  RecDat* rec_dat = iterator.next(); //id = 0
  rec_dat = iterator.next(); //id = 1
  rec_dat = iterator.next(); //id = 2
  rec_dat = iterator.next(); //id = 3
  rec_dat = iterator.next(); //id = 4
  vector<RecDat*> samples = periodic_learner.generate_train_data(rec_dat);
  vector<int> distribution(5);
  EXPECT_EQ(10000,samples.size());
  for(uint i =0; i<samples.size(); i++){
    ASSERT_LT(samples[i]->id,5);
    distribution[samples[i]->id]++;
  }
  for(int i=0;i<4;i++){
    EXPECT_LT(distribution[i],distribution[i+1]);
  }
  rec_dat = iterator.next(); //id = 5
  rec_dat = iterator.next(); //id = 6
  rec_dat = iterator.next(); //id = 7
  rec_dat = iterator.next(); //id = 8
  rec_dat = iterator.next(); //id = 9
  samples = periodic_learner.generate_train_data(rec_dat);
  distribution.clear();
  distribution.resize(10);
  for(uint i =0; i<samples.size(); i++){
    ASSERT_LT(samples[i]->id,10);
    distribution[samples[i]->id]++;
  }
  for(int i=0;i<9;i++){
    EXPECT_LT(distribution[i],distribution[i+1]);
  }

}
int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
