#include <vector>
#include <gtest/gtest.h>
#include "../../main/online_learners/PeriodicLearner.h"
#include "../../main/recommender_data/SimpleIterator.h"

namespace{
  struct DummyPeriodicLearnerParameters : public PeriodicLearnerParameters{
  };
  class DummyPeriodicLearner : public PeriodicLearner {
    public:
      DummyPeriodicLearner(DummyPeriodicLearnerParameters* params):PeriodicLearner(params){
        update_counter = 0;
      }
      ~DummyPeriodicLearner(){}
      int update_counter;
    private:
      void update_model(RecDat* rec_dat) override {
        update_counter++;
      }

  };
  class DummyModel: public Model{
    public:
      DummyModel(){
        write_counter = 0;
        read_counter = 0;
        clear_counter = 0;
        add_counter = 0;
      }
    void add(RecDat* recDat){ add_counter++;}
    double prediction(RecDat* recDat){ return 0; }
    void write(ofstream& file){write_counter++;}
    void read(ifstream& file){read_counter++;}
    void clear(){clear_counter++;}
    int write_counter;
    int read_counter;
    int clear_counter;
    int add_counter;
  };

  class TestPeriodicLearner : public ::testing::Test  {
    public:
      TestPeriodicLearner(){}
      virtual ~TestPeriodicLearner(){}
      virtual void SetUp(){
        rec_data.push_back(*create_rec_dat(5,6,10,1.0));
        rec_data.push_back(*create_rec_dat(7,8,31,1.0));
        rec_data.push_back(*create_rec_dat(9,4,112,1.0)); //learn itt
        rec_data.push_back(*create_rec_dat(6,7,113,1.0));
        rec_data.push_back(*create_rec_dat(3,4,216,1.0)); //itt egy kimarad, modellszamozas hogy koveti?
        rec_data.push_back(*create_rec_dat(3,4,416,1.0));
        recommender_data.setRecDats(rec_data);
      }
      virtual void TearDown(){}
      vector<RecDat> rec_data;
      vector<RecDat> rec_dats;
      RecommenderData recommender_data;
      DummyModel model;
      RecDat* create_rec_dat(int user, int item, double time, double score){
        RecDat rec_dat;
        rec_dat.user = user;
        rec_dat.item = item;
        rec_dat.time = time;
        rec_dat.score = score;
        rec_dats.push_back(rec_dat);
        return &rec_dats[rec_dats.size()-1];
      }
  };
}
TEST_F(TestPeriodicLearner, test_periodic){
  //test start_time, write, clear, period_num
  PeriodicLearnerParameters params;
  params.period_length=100;
  params.start_time=-1; //ezt talalja ki magatol
  params.read_model=false;
  params.write_model=true;
  params.base_out_file_name = "periodic_learner_test_file.txt";
  params.clear_model=true;
  params.mode="";
  PeriodicLearner periodic_learner(&params);
  periodic_learner.set_model(&model);
  SimpleIterator iterator(&recommender_data);
  periodic_learner.set_recommender_data_iterator(&iterator);
  periodic_learner.init();
  ASSERT_TRUE(periodic_learner.self_test());
  EXPECT_EQ(1,periodic_learner.period_num_);
  RecDat* rec_dat = iterator.next(); //time=10
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(1,periodic_learner.period_num_);
  EXPECT_EQ(10,periodic_learner.start_time_);
  rec_dat = iterator.next(); //time=31
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(2,periodic_learner.period_num_);
  EXPECT_EQ(2,model.clear_counter);
  EXPECT_EQ(1,model.write_counter);
  rec_dat = iterator.next(); //time=112
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(2,periodic_learner.period_num_);
  EXPECT_EQ(2,model.clear_counter);
  EXPECT_EQ(1,model.write_counter);
  rec_dat = iterator.next(); //time=113
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(3,periodic_learner.period_num_);
  EXPECT_EQ(3,model.clear_counter);
  EXPECT_EQ(2,model.write_counter);
  rec_dat = iterator.next(); //time=216
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(5,periodic_learner.period_num_);
  EXPECT_EQ(4,model.clear_counter);
  EXPECT_EQ(3,model.write_counter);
  rec_dat = iterator.next(); //time=416
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(6,periodic_learner.period_num_);
  EXPECT_EQ(5,model.clear_counter);
  EXPECT_EQ(4,model.write_counter);

  EXPECT_EQ(0,model.add_counter);
  EXPECT_EQ(0,model.read_counter);
} 

TEST_F(TestPeriodicLearner, test_periodic_read){
  //test read model
  PeriodicLearnerParameters params;
  params.period_length=100;
  params.start_time=-1; //ezt talalja ki magatol
  params.read_model=true;
  params.base_in_file_name = "periodic_learner_test_file.txt";
  params.write_model=false;
  params.clear_model=false;
  params.mode="";
  PeriodicLearner periodic_learner(&params);
  periodic_learner.set_model(&model);
  SimpleIterator iterator(&recommender_data);
  periodic_learner.set_recommender_data_iterator(&iterator);
  periodic_learner.init();
  ASSERT_TRUE(periodic_learner.self_test());
  RecDat* rec_dat = iterator.next(); //time=10
  periodic_learner.learn(rec_dat);
  rec_dat = iterator.next(); //time=31
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(1,model.read_counter);
  rec_dat = iterator.next(); //time=112
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(1,model.read_counter);
  rec_dat = iterator.next(); //time=113
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(2,model.read_counter);
  rec_dat = iterator.next(); //time=216
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(3,model.read_counter);
  rec_dat = iterator.next(); //time=416
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(4,model.read_counter);

  EXPECT_EQ(0,model.add_counter);
  EXPECT_EQ(0,model.clear_counter);
  EXPECT_EQ(0,model.write_counter);
  remove("periodic_learner_test_file.txt_1");
  remove("periodic_learner_test_file.txt_2");
  remove("periodic_learner_test_file.txt_3");
  remove("periodic_learner_test_file.txt_5");
} 

TEST_F(TestPeriodicLearner, test_dummy){
  DummyPeriodicLearnerParameters dummy_params;
  dummy_params.period_length=100;
  dummy_params.start_time=-1; //ezt talalja ki magatol
  dummy_params.read_model=false;
  dummy_params.write_model=false;
  dummy_params.clear_model=false;
  dummy_params.mode="";
  DummyPeriodicLearner dummy_periodic_learner(&dummy_params);
  SimpleIterator iterator(&recommender_data);
  dummy_periodic_learner.set_recommender_data_iterator(&iterator);
  dummy_periodic_learner.init();
  ASSERT_TRUE(dummy_periodic_learner.self_test());
  RecDat* rec_dat = iterator.next(); //time=10
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(0,dummy_periodic_learner.update_counter);
  rec_dat = iterator.next(); //time=31
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(1,dummy_periodic_learner.update_counter);
  rec_dat = iterator.next(); //time=112
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(1,dummy_periodic_learner.update_counter);
  rec_dat = iterator.next(); //time=113
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(2,dummy_periodic_learner.update_counter);
  rec_dat = iterator.next(); //time=216
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(3,dummy_periodic_learner.update_counter);
  rec_dat = iterator.next(); //time=416
  dummy_periodic_learner.learn(rec_dat);
  EXPECT_EQ(4,dummy_periodic_learner.update_counter);

}

TEST_F(TestPeriodicLearner, test_samplenum_mode){
  PeriodicLearnerParameters params;
  params.mode="samplenum-based";
  params.samplenum_in_periods=10;
  params.start_time=-1;
  params.read_model=false;
  params.write_model=false;
  params.clear_model=true;
  PeriodicLearner periodic_learner(&params);
  periodic_learner.set_model(&model);
  rec_data.clear();
  for(int i=0;i<103;i++){
    rec_data.push_back(*create_rec_dat(i,i,i,1.0));
  }
  recommender_data.setRecDats(rec_data);
  SimpleIterator iterator(&recommender_data);
  periodic_learner.set_recommender_data_iterator(&iterator);

  periodic_learner.init();
  ASSERT_TRUE(periodic_learner.self_test());
  EXPECT_EQ(1,model.clear_counter);
  for(int j=0;j<10;j++){
    for(int i=0;i<9;i++){
      RecDat* rec_dat = iterator.next();
      periodic_learner.learn(rec_dat);
    }
    EXPECT_EQ(j+1,model.clear_counter);
    RecDat* rec_dat = iterator.next();
    periodic_learner.learn(rec_dat);
    EXPECT_EQ(j+2,model.clear_counter);
  }
  RecDat* rec_dat = iterator.next();
  periodic_learner.learn(rec_dat);
  rec_dat = iterator.next();
  periodic_learner.learn(rec_dat);
  rec_dat = iterator.next();
  periodic_learner.learn(rec_dat);
  EXPECT_EQ(12,model.clear_counter);
} 
int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
