#include "../../main/online_learners/PeriodicTimeframeImplicitGradientLearner.h"
#include <vector>
#include <gtest/gtest.h>
#include "../../main/gradient_computers/GradientComputer.h"
#include "../../main/objectives/ObjectiveMSE.h"
#include "../../main/recommender_data/SimpleIterator.h"

namespace{
  class DummyModel: public Model{
    public:
      DummyModel(){
        writecounter = 0;
        readcounter = 0;
        clearcounter = 0;
      }
    void add(RecDat* recDat){}
    double prediction(RecDat* recDat){ return 0; }
    void write(ofstream& file){writecounter++;}
    void read(ifstream& file){readcounter++;}
    void clear(){clearcounter++;}
    int writecounter;
    int readcounter;
    int clearcounter;
  };

  class DummyUpdater: public ModelGradientUpdater{
    public:
      DummyUpdater(){
        counter = 0;
      }
      void update(RecDat* recDat, double gradient){
        counter++;
      }
      int counter;
  };

  class DummySampleGenerator : public NegativeSampleGenerator{
    public:
      DummySampleGenerator(){samples.push_back(1);samples.push_back(2);samples.push_back(3);}
      vector<int>* generate(RecDat * recDat){
        return &samples;
      }
  };
  class DummySampleGenerator2 : public NegativeSampleGenerator{
    public:
      DummySampleGenerator2(){samples.push_back(1);samples.push_back(2);samples.push_back(3);check_=false;}
      vector<int>* generate(RecDat * recDat){
        if(check_){
          items_=*local_items_;
          check_ = false;
        }
        return &samples;
      }
      bool check_;
      vector<int> items_;
      vector<int>* local_items_;
      //SpMatrix train_matrix_;
      SpMatrix* local_train_matrix_;
  };

  class DummyGradientComputer : public GradientComputer{
    public:
      DummyGradientComputer(){
        hasNextVar = false;
      }
      void setUp(vector<RecDat>* trainData_){
        trainData = trainData_;
        gradientVector.clear();
        for(int i = 0;i<trainData->size(); i++){
          gradientVector.push_back(make_pair(&(trainData->at(i)),0.5));
        }
        hasNextVar = true;
      }
      vector<pair<RecDat*,double> >* getNextGradient(){ hasNextVar = false; return &gradientVector;}
      bool hasNext(){return hasNextVar;}
    private:
      bool hasNextVar;
  };

  class TestPeriodicTimeframeImplicitGradientLearner : public ::testing::Test  {
    public:
      TestPeriodicTimeframeImplicitGradientLearner(){}
      virtual ~TestPeriodicTimeframeImplicitGradientLearner(){}
      virtual void SetUp(){}
      virtual void TearDown(){
        for (vector<RecDat*>::iterator it = recDats.begin();it!=recDats.end();it++){
          delete *it;
        }
      }
      vector<RecDat*> recDats;
      RecDat* createRecDat(int user, int item, double time, double score){
        RecDat* recDat = new RecDat;
        recDat -> user = user;
        recDat -> item = item;
        recDat -> time = time;
        recDat -> score = score;
        recDats.push_back(recDat);
        return recDat;
      }
  };
}
//  TEST_F(TestPeriodicTimeframeImplicitGradientLearner, selftesttest){
//    PeriodicTimeframeImplicitGradientLearnerParameters params;
//    //params.numberOfIterations = 3;
//    params.start_time = 10;
//    params.period_length = 5;
//    params.write_model = false;
//    params.read_model = false;
//    params.clear_model = false;
//    params.learn = false;
//    PeriodicTimeframeImplicitGradientLearner learner(&params);
//    
//    EXPECT_FALSE(learner.selfTest());
//
//    DummyModel model;
//    learner.setModel(&model);
//
//    DummyUpdater updater;
//    learner.addGradientUpdater(&updater);
//
//    vector<RecDat> recData;
//    recData.push_back(*createRecDat(5,6,10,1.0));
//    recData.push_back(*createRecDat(7,8,11,1.0));
//    recData.push_back(*createRecDat(9,4,12,1.0));
//    recData.push_back(*createRecDat(6,7,13,1.0));
//    recData.push_back(*createRecDat(3,4,16,1.0));
//    RecommenderData recommenderData;
//    recommenderData.setRecDats(recData);
//    SimpleIterator iterator(&recommenderData);
//    learner.set_recommender_data_iterator(&iterator);
//
//    DummySampleGenerator generator;
//    learner.set_negative_sample_generator(&generator);
//
//    DummyGradientComputer gradient_computer;
//    learner.set_gradient_computer(&gradient_computer);
//
//    EXPECT_TRUE(learner.selfTest());
//  }
//  TEST_F(TestPeriodicTimeframeImplicitGradientLearner, donothing){
//    PeriodicTimeframeImplicitGradientLearnerParameters params;
//    //params.numberOfIterations = 3;
//    params.start_time = 10;
//    params.period_length = 5;
//    params.timeframe_length = 9;
//    params.write_model = false;
//    params.read_model = false;
//    params.clear_model = false;
//    params.learn = false;
//    PeriodicTimeframeImplicitGradientLearner learner(&params);
//
//    DummyModel model;
//    learner.setModel(&model);
//
//    DummyUpdater updater;
//    learner.addGradientUpdater(&updater);
//
//    vector<RecDat> recData;
//    recData.push_back(*createRecDat(5,6,10,1.0));
//    recData.push_back(*createRecDat(7,8,11,1.0));
//    recData.push_back(*createRecDat(9,4,12,1.0));
//    recData.push_back(*createRecDat(6,7,13,1.0));
//    recData.push_back(*createRecDat(3,4,16,1.0));
//    RecommenderData recommenderData;
//    recommenderData.setRecDats(recData);
//    SimpleIterator iterator(&recommenderData);
//    learner.set_recommender_data_iterator(&iterator);
//
//    DummySampleGenerator generator;
//    learner.set_negative_sample_generator(&generator);
//
//    DummyGradientComputer gradient_computer;
//    learner.set_gradient_computer(&gradient_computer);
//
//    RecDat* recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    //test: eddig nem tanult semmit
//    recDat = iterator.next();
//    learner.learn(recDat);
//    //test: itt aztan hadd szoljon
//    recDat = iterator.next();
//    learner.learn(recDat);
//    EXPECT_EQ(0,updater.counter);
//    EXPECT_EQ(0,model.writecounter);
//    EXPECT_EQ(0,model.readcounter);
//    EXPECT_EQ(0,model.clearcounter);
//
//  }
//
//  TEST_F(TestPeriodicTimeframeImplicitGradientLearner, dolearn){
//    PeriodicTimeframeImplicitGradientLearnerParameters params;
//    params.number_of_iterations = 3;
//    params.start_time = 10;
//    params.period_length = 5;
//    params.timeframe_length = 9;
//    params.write_model = false;
//    params.read_model = false;
//    params.clear_model = false;
//    params.learn = true;
//    PeriodicTimeframeImplicitGradientLearner learner(&params);
//
//    DummyModel model;
//    learner.setModel(&model);
//
//    DummyUpdater updater;
//    learner.addGradientUpdater(&updater);
//
//    vector<RecDat> rec_data;
//    rec_data.push_back(*createRecDat(5,6,10,1.0));
//    rec_data.push_back(*createRecDat(7,8,12,1.0));
//    rec_data.push_back(*createRecDat(9,4,12,1.0));
//    rec_data.push_back(*createRecDat(6,7,13,1.0));
//    rec_data.push_back(*createRecDat(3,5,17,1.0));
//    rec_data.push_back(*createRecDat(3,6,18,1.0));
//    rec_data.push_back(*createRecDat(2,4,22,1.0));
//    rec_data.push_back(*createRecDat(3,2,33,1.0));
//    RecommenderData recommender_data;
//    recommender_data.setRecDats(rec_data);
//    SimpleIterator iterator(&recommender_data);
//    learner.set_recommender_data_iterator(&iterator);
//
//    DummySampleGenerator generator;
//    learner.set_negative_sample_generator(&generator);
//
//    DummyGradientComputer gradient_computer;
//    learner.set_gradient_computer(&gradient_computer);
//
//    RecDat* recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    //test: itt aztan hadd szoljon
//    EXPECT_EQ(4*(1+3)*3,updater.counter);
//    //next
//    recDat = iterator.next();
//    learner.learn(recDat);
//    EXPECT_EQ(4*12,updater.counter);
//    
//    recDat = iterator.next();
//    learner.learn(recDat);
//    EXPECT_EQ(4*12+5*12,updater.counter);
//
//
//    EXPECT_EQ(0,model.writecounter);
//    EXPECT_EQ(0,model.readcounter);
//    EXPECT_EQ(0,model.clearcounter);
//
//    recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//  }
//
//  TEST_F(TestPeriodicTimeframeImplicitGradientLearner, too_short_timeframe){
//    //timeframe is shorter than period
//    PeriodicTimeframeImplicitGradientLearnerParameters params;
//    params.number_of_iterations = 1;
//    params.start_time = 10;
//    params.period_length = 10;
//    params.timeframe_length = 5;
//    params.write_model = false;
//    params.read_model = false;
//    params.clear_model = false;
//    params.learn = true;
//    PeriodicTimeframeImplicitGradientLearner learner(&params);
//
//    DummyModel model;
//    learner.setModel(&model);
//
//    DummyUpdater updater;
//    learner.addGradientUpdater(&updater);
//
//    vector<RecDat> rec_data;
//    rec_data.push_back(*createRecDat(5,6,10,1.0));
//    rec_data.push_back(*createRecDat(7,8,12,1.0));
//    rec_data.push_back(*createRecDat(9,4,13,1.0));
//    rec_data.push_back(*createRecDat(6,7,16,1.0));
//    rec_data.push_back(*createRecDat(3,5,17,1.0));
//    rec_data.push_back(*createRecDat(3,6,23,1.0));
//    rec_data.push_back(*createRecDat(2,4,29,1.0));
//    rec_data.push_back(*createRecDat(3,2,31,1.0));
//    RecommenderData recommender_data;
//    recommender_data.setRecDats(rec_data);
//    SimpleIterator iterator(&recommender_data);
//    learner.set_recommender_data_iterator(&iterator);
//
//    DummySampleGenerator generator;
//    learner.set_negative_sample_generator(&generator);
//
//    DummyGradientComputer gradient_computer;
//    learner.set_gradient_computer(&gradient_computer);
//
//    RecDat* recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    //test: itt aztan hadd szoljon
//    EXPECT_EQ(2*(1+3)*1,updater.counter);
//    //next
//    recDat = iterator.next();
//    learner.learn(recDat);
//    recDat = iterator.next();
//    learner.learn(recDat);
//    EXPECT_EQ(8+1*(1+3)*1,updater.counter);
//  }
//  TEST_F(TestPeriodicTimeframeImplicitGradientLearner, local_containters){
//    PeriodicTimeframeImplicitGradientLearnerParameters params;
//    params.number_of_iterations = 3;
//    params.start_time = 10;
//    params.period_length = 5;
//    params.timeframe_length = 9;
//    params.write_model = false;
//    params.read_model = false;
//    params.clear_model = true;
//    params.learn = true;
//    PeriodicTimeframeImplicitGradientLearner learner(&params);
//
//    DummyModel model;
//    learner.setModel(&model);
//
//    DummyUpdater updater;
//    learner.addGradientUpdater(&updater);
//
//    vector<RecDat> rec_data;
//    rec_data.push_back(*createRecDat(5,6,10,1.0));
//    rec_data.push_back(*createRecDat(7,8,12,1.0));
//    rec_data.push_back(*createRecDat(9,4,12,1.0));
//    rec_data.push_back(*createRecDat(6,7,13,1.0));
//    rec_data.push_back(*createRecDat(3,5,17,1.0));
//    rec_data.push_back(*createRecDat(3,6,18,1.0));
//    rec_data.push_back(*createRecDat(2,4,22,1.0));
//    rec_data.push_back(*createRecDat(3,2,33,1.0));
//    RecommenderData recommender_data;
//    recommender_data.setRecDats(rec_data);
//    SimpleIterator iterator(&recommender_data);
//    learner.set_recommender_data_iterator(&iterator);
//
//    DummySampleGenerator2 generator;
//    learner.set_negative_sample_generator(&generator);
//    vector<int> local_items;
//    SpMatrix local_train_matrix;
//    generator.local_items_=&local_items;
//    generator.local_train_matrix_=&local_train_matrix;
//    learner.set_local_items(&local_items);
//    learner.set_local_train_matrix(&local_train_matrix);
//
//    DummyGradientComputer gradient_computer;
//    learner.set_gradient_computer(&gradient_computer);
//
//    generator.check_=true;
//    generator.items_.clear();
//    RecDat* recDat = iterator.next();
//    learner.learn(recDat);
//    cerr << "RecDat: " << recDat->user << " " << recDat->item << " items: "; for(int i=0;i<generator.items_.size();i++){ cerr << generator.items_[i] << " "; }; cerr << endl;
//    recDat = iterator.next();
//    learner.learn(recDat);
//    cerr << "RecDat: " << recDat->user << " " << recDat->item << " items: "; for(int i=0;i<generator.items_.size();i++){ cerr << generator.items_[i] << " "; }; cerr << endl;
//    recDat = iterator.next();
//    learner.learn(recDat);
//    cerr << "RecDat: " << recDat->user << " " << recDat->item << " items: "; for(int i=0;i<generator.items_.size();i++){ cerr << generator.items_[i] << " "; }; cerr << endl;
//    recDat = iterator.next();
//    learner.learn(recDat);
//    cerr << "RecDat: " << recDat->user << " " << recDat->item << " items: "; for(int i=0;i<generator.items_.size();i++){ cerr << generator.items_[i] << " "; }; cerr << endl;
//
//    ASSERT_EQ(4,generator.items_.size());
//    sort(generator.items_.begin(),generator.items_.end());
//    EXPECT_EQ(4,generator.items_[0]);
//    EXPECT_EQ(6,generator.items_[1]);
//    EXPECT_EQ(7,generator.items_[2]);
//    EXPECT_EQ(8,generator.items_[3]);
//    generator.check_=true;
//    generator.items_.clear();
//
//    recDat = iterator.next();
//    learner.learn(recDat);
//    cerr << "RecDat: " << recDat->user << " " << recDat->item << " items: "; for(int i=0;i<generator.items_.size();i++){ cerr << generator.items_[i] << " "; }; cerr << endl;
//    recDat = iterator.next();
//    learner.learn(recDat);
//    cerr << "RecDat: " << recDat->user << " " << recDat->item << " items: "; for(int i=0;i<generator.items_.size();i++){ cerr << generator.items_[i] << " "; }; cerr << endl;
//    ASSERT_EQ(5,generator.items_.size());
//    sort(generator.items_.begin(),generator.items_.end());
//    EXPECT_EQ(4,generator.items_[0]);
//    EXPECT_EQ(5,generator.items_[1]);
//    EXPECT_EQ(6,generator.items_[2]);
//    EXPECT_EQ(7,generator.items_[3]);
//    EXPECT_EQ(8,generator.items_[4]);
//    generator.check_=true;
//    generator.items_.clear();
//
//    recDat = iterator.next();
//    learner.learn(recDat);
//    cerr << "RecDat: " << recDat->user << " " << recDat->item << " items: "; for(int i=0;i<generator.items_.size();i++){ cerr << generator.items_[i] << " "; }; cerr << endl;
//    ASSERT_EQ(3,generator.items_.size());
//    sort(generator.items_.begin(),generator.items_.end());
//    EXPECT_EQ(4,generator.items_[0]);
//    EXPECT_EQ(5,generator.items_[1]);
//    EXPECT_EQ(6,generator.items_[2]);
//    generator.check_=true;
//    generator.items_.clear();
//
//    recDat = iterator.next();
//    learner.learn(recDat);
//    cerr << "RecDat: " << recDat->user << " " << recDat->item << " items: "; for(int i=0;i<generator.items_.size();i++){ cerr << generator.items_[i] << " "; }; cerr << endl;
//    //ASSERT_EQ(1,generator.items_.size());
//    sort(generator.items_.begin(),generator.items_.end());
//    //EXPECT_EQ(2,generator.items_[0]);
//    generator.check_=true;
//    generator.items_.clear();
//  }

int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
