#include <gtest/gtest.h>
#include "../../main/models/PopularityModel.h"
#include "../../main/updaters/PopularityModelUpdater.h"
#include "../../main/online_learners/SimpleLearner.h"

namespace {
class TestPopularityModel : public ::testing::Test { 
  public:
    vector<RecDat*> recDats;
    PopularityModel model;
    PopularityModelUpdater modelUpdater;
    SimpleLearner learner;

    TestPopularityModel(){}
    virtual ~TestPopularityModel(){}
    virtual void SetUp(){
      modelUpdater.setModel(&model);
      learner.setModel(&model);
      learner.addSimpleUpdater(&modelUpdater);
    }
    virtual void TearDown(){
      for (vector<RecDat*>::iterator it = recDats.begin();it!=recDats.end();it++){
        delete *it;
      }
    }
    RecDat* createRecDat(int user, int item, double time){
      RecDat* recDat = new RecDat;
      recDat -> user = user;
      recDat -> item = item;
      recDat -> time = time;
      recDats.push_back(recDat);
      return recDat;
    }
};
}

TEST_F(TestPopularityModel, update){
  //updating: the counter of recDat::item should be increased and maxitem should be updated
  RecDat * recDat = createRecDat(1,100,0.0);
  model.add(recDat);
  modelUpdater.update(recDat);
  EXPECT_EQ(1,model.maxitem);
  EXPECT_EQ(1,model.items.get(100));
  EXPECT_EQ(0,model.items.get(99));
  EXPECT_EQ(0,model.items.get(1));
  recDat = createRecDat(3,100,1.0);
  model.add(recDat);
  modelUpdater.update(recDat);
  EXPECT_EQ(2,model.maxitem);
  EXPECT_EQ(2,model.items.get(100));
  EXPECT_EQ(0,model.items.get(3));
  recDat = createRecDat(2, 50, 2.0);
  model.add(recDat);
  modelUpdater.update(recDat);
  EXPECT_EQ(2,model.maxitem);
  EXPECT_EQ(1,model.items.get(50));
}

TEST_F(TestPopularityModel, learn){
  //learn(recDat): add+update
  learner.learn(createRecDat(5,20,0.0));
  EXPECT_EQ(model.maxitem,1);
  EXPECT_EQ(model.items.get(20), 1);
  EXPECT_EQ(model.items.get(5), 0);
  learner.learn(createRecDat(3,20,1.0));
  learner.learn(createRecDat(5,13,1.5));
  learner.learn(createRecDat(4,13,1.6));
  learner.learn(createRecDat(2,13,1.7));
  EXPECT_EQ(model.maxitem,3);
  learner.learn(createRecDat(8,20,3.0));
  learner.learn(createRecDat(5,20,3.1));
  learner.learn(createRecDat(4,4,3.2));
  EXPECT_EQ(model.maxitem,4);
  EXPECT_EQ(model.items.get(20), 4);
  EXPECT_EQ(model.items.get(4), 1);
  EXPECT_EQ(model.items.get(13), 3);
}

TEST_F(TestPopularityModel, predict){
  //predict: normalized log of item's score, independent from users
  RecDat* recDat = createRecDat(0,0,0);
  model.add(recDat);
  EXPECT_EQ(model.prediction(recDat),0.0);
  learner.learn(createRecDat(5,20,1.0));
  learner.learn(createRecDat(12,20,2.0));
  learner.learn(createRecDat(25,20,3.0));
  EXPECT_EQ(model.prediction(createRecDat(30,20,4.0)),log(3+1)/(log(3+1)));
  EXPECT_EQ(model.prediction(createRecDat(3,12,4.0)),0.0);
  learner.learn(createRecDat(3,10,4.0));
  learner.learn(createRecDat(5,10,4.0));
  EXPECT_EQ(model.prediction(createRecDat(0,10,5.0)),log(2+1)/log(3+1));
}
int main (int argc, char **argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
