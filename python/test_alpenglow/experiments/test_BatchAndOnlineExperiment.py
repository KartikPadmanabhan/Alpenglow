import alpenglow as prs
import alpenglow.Getter as rs
import alpenglow.experiments
import pandas as pd
import math


class TestBatchAndOnlineExperiment:
    def test_batchAndOnlineExperiment(self):
        boModelExperiment = alpenglow.experiments.BatchAndOnlineExperiment(
            top_k=100,
            seed=254938879,
            dimension=10,
            period_length=1000,
            batch_learning_rate=0.07,
            batch_negative_rate=20,
            online_learning_rate=0.15,
            online_negative_rate=120,
            number_of_iterations=3,
            clear_model=True,
        )
        boRankings = boModelExperiment.run("python/test_alpenglow/test_data_4", experimentType="online_id", verbose=True)
        assert boRankings.top_k == 100
        desired_ranks = [102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 0, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 4, 102, 102, 2, 102, 102, 102, 102, 102, 102, 102, 19, 102, 102, 102, 102, 102, 102, 102, 102, 3, 102, 102, 102, 34, 5, 15, 102, 102, 19, 102, 27, 102, 102, 102, 102, 102, 102, 13, 102, 44, 34, 21, 102, 102, 102, 102, 102, 102, 24, 102, 4, 102, 32, 102, 102, 102, 4, 102, 102, 18, 102, 10, 1, 102, 102, 102, 102, 102, 102, 19, 102, 6, 46, 102, 45, 44, 28, 18, 102, 102, 40, 102, 102, 102, 18, 68, 62, 41, 102, 43, 61, 102, 102, 63, 19, 102, 102, 102, 70, 14, 58, 102, 22, 0, 41, 5, 11, 4, 10, 102, 24, 102, 102, 56, 8, 10, 102, 41, 37, 10, 55, 17, 48, 102, 70, 102, 102, 38, 102, 72, 74, 102, 4, 52, 12, 68, 40, 102, 28, 102, 102, 26, 102, 102, 102, 102, 61, 102, 9, 2, 102, 102, 102, 102, 3, 73, 15, 102, 102, 60, 102, 20, 102, 87, 87, 83, 32, 102, 102, 16, 6, 102, 79, 61, 30, 13, 96, 9, 102, 102, 102, 102, 70, 102, 60, 102, 11, 102, 97, 45, 102, 102, 4, 29, 34, 67, 102, 102, 80, 23, 35, 18, 102, 37, 102, 49, 84, 35, 59, 100, 74, 68, 102, 102, 102, 102, 102, 100, 0, 102, 11, 78, 47, 72, 3, 102, 27, 14, 31, 20, 102, 102, 57, 102, 100, 35, 18, 102, 74, 63, 34, 19, 12, 9, 102, 70, 14, 102, 102, 102, 102, 75, 100, 8, 102, 102, 94, 102, 22, 12, 102, 1, 83, 17, 100, 26, 45, 102, 102, 102, 89, 102, 55, 13, 102, 28, 19, 102, 102, 102, 102, 84, 84, 80, 100, 6, 40, 56, 46, 102, 102, 102, 102, 38, 102, 29, 102, 1, 102, 34, 102, 50, 100, 56, 102, 65, 100, 100, 39, 100, 102, 74, 8, 102, 8, 102, 86, 2, 15, 5, 100, 102, 4, 100, 102, 68, 102, 3, 42, 53, 3, 33, 100, 12, 102, 48, 97, 102, 102, 69, 100, 75, 63, 102, 102, 102, 40, 90, 102, 65, 84, 102, 77, 47, 102, 72, 100, 89, 60, 48, 42, 89, 38, 102, 29, 18, 47, 92, 48, 38, 102, 102, 71, 65, 102, 33, 102, 8, 102, 46, 100, 51, 102, 102, 79, 31, 102, 77, 102, 102, 102, 102, 102, 22, 36, 100, 100, 16, 102, 31, 94, 76, 102, 22, 102, 12, 102, 100, 66, 8, 102, 102, 1, 102, 2, 51, 100, 1, 100, 0, 100, 16, 1, 32, 0, 20, 100, 41, 33, 73, 11, 40, 102, 14, 100, 102, 100, 33, 42, 31, 39, 58, 35, 38, 26, 100, 2, 1, 102, 0, 102, 24, 102, 76, 102, 87, 30, 102, 102, 102, 35, 102, 62, 31, 51, 100, 0, 102, 74, 24, 100, 49, 102, 102, 16, 25, 102, 31, 100, 100, 35, 7, 85, 100, 63, 102, 1, 100, 100, 100, 63, 100, 100, 100, 28, 63, 82, 102, 93, 15, 71, 10, 22, 102, 102, 0, 102, 90, 53, 102, 17, 102, 102, 17, 89, 102, 47, 8, 100, 100, 102, 102, 79, 100, 3, 5, 102, 50, 40, 1, 17, 100, 8, 102, 32, 31, 15, 7, 43, 72, 102, 100, 102, 21, 102, 100, 102, 1, 69, 74, 6, 102, 100, 102, 99, 54, 102, 102, 100, 45, 100, 102, 51, 0, 100, 100, 102, 100, 0, 102, 5, 102, 17, 100, 39, 9, 22, 100, 14, 102, 100, 102, 6, 67, 57, 45, 21, 22, 102, 100, 102, 50, 102, 102, 56, 20, 100, 20, 102, 34, 100, 3, 2, 44, 100, 100, 41, 28, 100, 17, 22, 2, 102, 102, 6, 102, 102, 24, 102, 5, 18, 102, 102, 100, 30, 24, 20, 100, 102, 100, 100, 102, 1, 102, 37, 49, 15, 13, 21, 64, 11, 17, 16, 4, 102, 11, 6, 13, 100, 14, 77, 13, 100, 27, 10, 4, 102, 20, 8, 102, 32, 102, 100, 1, 35, 100, 102, 100, 9, 100, 23, 100, 76, 54, 100, 15, 102, 102, 5, 8, 102, 8, 100, 23, 102, 22, 4, 100, 9, 14, 28, 102, 102, 35, 15, 100, 100, 102, 1, 1, 4, 102, 3, 41, 11, 20, 15, 71, 11, 25, 10, 54, 100, 19, 29, 100, 6, 6, 100, 102, 90, 62, 46, 1, 3, 102, 5, 1, 100, 25, 2, 11, 0, 100, 102, 64, 100, 15, 7, 102, 19, 23, 102, 102, 11, 100, 7, 19, 28, 7, 102, 6, 11, 1, 14, 102, 66, 100, 38, 31, 102, 8, 3, 100, 100, 68, 3, 20, 30, 6, 100, 100, 27, 7, 100, 2, 5, 35, 9, 7, 100, 11, 10, 70, 0, 100, 31, 100, 0, 23, 100, 1, 17, 0, 102, 102, 100, 102, 102, 10, 16, 6, 102, 10, 12, 67, 19, 74, 3, 100, 31, 102, 100, 100, 102, 102, 1, 11, 15, 25, 102, 54, 58, 14, 26, 9, 4, 100, 15, 11, 43, 102, 100, 28, 102, 102, 5, 13, 27, 41, 35, 102, 0, 10, 89, 102, 9, 25, 7, 18, 37, 9, 7, 7, 82, 3, 7, 55, 31, 4, 13, 2, 102, 53, 8, 9, 102, 19, 13, 4, 35, 100, 95, 102, 34, 32, 17, 102, 29, 102, 100, 16, 11, 16, 17, 36, 102, 10, 100, 80, 59, 102, 102, 89, 37, 9, 102, 100, 6, 100, 8, 102, 20, 0, 7, 38, 29, 102, 22, 49, 102, 102, 8, 102, 15, 102, 6, 15, 6, 3, 2, 38, 0, 25, 100, 2, 80, 16, 22, 102, 9, 75, 102, 10, 25, 70, 0, 100, 100, 4, 5, 16, 31, 37, 95, 16, 3, 100, 2, 7, 76, 14, 102, 3, 10, 32, 100, 30, 2, 102, 0, 4, 100, 100, 4, 27, 34, 43, 100, 100, 102]
        desired_ranks = list(map(lambda i: i + 1 if i < 100 else 101, desired_ranks))
        assert list(boRankings["rank"].fillna(101)) == desired_ranks
