import alpenglow as prs
import alpenglow.Getter as rs
import alpenglow.experiments
import alpenglow.evaluation
import pandas as pd
import math


class TestSvdppModelExperiment:
    def test_SvdppModelExperiment(self):
        experiment = alpenglow.experiments.SvdppModelExperiment(
            top_k=100,
            seed=254938879,
            dimension=10,
            learning_rate=0.1,
            negative_rate=10
        )
        rankings = experiment.run("python/test_alpenglow/test_data_4", experimentType="online_id", verbose=True)
        assert rankings.top_k == 100
        desired_ranks = [101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 13, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 5, 101, 101, 2, 101, 101, 101, 101, 101, 101, 101, 13, 101, 101, 101, 101, 101, 101, 101, 101, 4, 101, 101, 101, 25, 15, 36, 101, 101, 12, 101, 23, 101, 101, 101, 101, 101, 101, 26, 101, 2, 22, 29, 101, 101, 101, 101, 101, 101, 17, 101, 7, 101, 2, 101, 101, 101, 20, 101, 101, 18, 101, 43, 25, 101, 101, 101, 101, 101, 101, 45, 101, 8, 27, 101, 24, 28, 38, 62, 101, 101, 26, 101, 101, 101, 16, 70, 35, 52, 101, 24, 4, 101, 101, 54, 70, 101, 101, 101, 2, 11, 30, 101, 37, 59, 30, 15, 10, 36, 4, 101, 38, 101, 101, 17, 69, 55, 101, 66, 16, 30, 2, 17, 10, 101, 10, 101, 101, 11, 101, 53, 52, 101, 72, 67, 8, 67, 69, 101, 29, 101, 101, 76, 101, 101, 101, 101, 14, 101, 11, 4, 101, 101, 101, 101, 2, 2, 83, 101, 101, 11, 101, 88, 101, 94, 3, 34, 56, 101, 101, 21, 68, 101, 36, 63, 7, 6, 11, 11, 101, 101, 101, 101, 46, 101, 75, 101, 5, 101, 1, 46, 101, 101, 79, 16, 9, 20, 101, 101, 51, 22, 100, 28, 101, 11, 101, 84, 89, 67, 98, 80, 25, 95, 101, 101, 101, 101, 101, 100, 101, 101, 1, 2, 80, 88, 54, 101, 20, 36, 9, 67, 101, 101, 93, 101, 96, 78, 91, 101, 55, 11, 65, 18, 27, 8, 101, 22, 45, 101, 101, 101, 101, 20, 85, 6, 101, 101, 32, 101, 17, 11, 101, 24, 99, 101, 5, 25, 14, 101, 101, 101, 27, 101, 101, 12, 101, 7, 101, 101, 101, 101, 101, 29, 86, 24, 50, 13, 10, 60, 17, 101, 101, 101, 101, 30, 101, 35, 101, 99, 101, 89, 101, 40, 41, 101, 101, 38, 26, 79, 2, 101, 101, 29, 12, 101, 21, 101, 47, 95, 66, 5, 101, 101, 5, 33, 101, 15, 101, 12, 101, 82, 18, 101, 36, 72, 101, 8, 52, 101, 101, 101, 30, 58, 101, 101, 101, 101, 101, 22, 101, 67, 101, 101, 62, 2, 101, 47, 57, 101, 86, 101, 69, 43, 17, 101, 101, 101, 101, 23, 22, 10, 101, 101, 92, 50, 101, 101, 101, 95, 101, 101, 54, 2, 101, 101, 35, 49, 101, 99, 101, 101, 101, 101, 101, 100, 11, 8, 101, 52, 101, 72, 101, 10, 101, 88, 101, 1, 101, 72, 98, 36, 101, 101, 17, 101, 13, 95, 101, 33, 31, 37, 1, 35, 101, 29, 5, 27, 101, 48, 48, 76, 101, 24, 101, 56, 69, 101, 90, 101, 31, 58, 101, 84, 101, 101, 66, 101, 56, 17, 101, 14, 101, 89, 101, 74, 101, 101, 14, 101, 101, 101, 101, 101, 101, 98, 69, 101, 33, 101, 94, 31, 51, 18, 101, 101, 69, 78, 101, 101, 101, 70, 101, 14, 101, 7, 4, 101, 101, 44, 101, 54, 96, 62, 47, 101, 53, 58, 101, 101, 88, 2, 101, 101, 69, 101, 101, 35, 101, 23, 101, 101, 101, 101, 101, 101, 44, 101, 74, 47, 66, 83, 101, 101, 68, 101, 101, 2, 101, 18, 92, 5, 24, 101, 3, 101, 25, 101, 54, 10, 71, 65, 101, 26, 101, 8, 101, 101, 101, 14, 12, 47, 19, 101, 58, 101, 39, 101, 101, 101, 43, 101, 46, 101, 101, 67, 99, 101, 101, 59, 8, 101, 36, 101, 1, 86, 101, 55, 17, 101, 26, 101, 101, 101, 101, 98, 101, 56, 101, 3, 101, 4, 101, 101, 101, 101, 86, 101, 29, 89, 101, 101, 58, 101, 101, 101, 6, 101, 101, 65, 6, 21, 7, 14, 101, 101, 62, 101, 101, 101, 101, 101, 14, 101, 101, 91, 56, 101, 52, 101, 101, 2, 101, 101, 101, 101, 101, 6, 101, 101, 75, 101, 53, 13, 7, 101, 101, 67, 21, 22, 101, 2, 50, 30, 101, 1, 32, 101, 101, 56, 101, 101, 28, 101, 101, 24, 101, 101, 101, 5, 31, 11, 65, 45, 101, 101, 101, 32, 101, 101, 3, 24, 101, 13, 101, 34, 101, 32, 101, 100, 37, 101, 101, 101, 101, 33, 101, 101, 97, 101, 37, 5, 80, 101, 1, 23, 70, 23, 54, 99, 6, 101, 101, 101, 101, 101, 101, 26, 101, 101, 43, 101, 101, 62, 30, 58, 101, 101, 6, 101, 56, 101, 101, 101, 3, 101, 101, 101, 101, 5, 7, 101, 2, 38, 101, 101, 3, 46, 64, 101, 28, 101, 101, 101, 101, 28, 95, 101, 101, 81, 101, 101, 101, 101, 22, 91, 32, 101, 8, 101, 15, 4, 94, 21, 52, 47, 58, 13, 12, 101, 97, 101, 101, 101, 7, 35, 26, 5, 8, 101, 12, 101, 51, 95, 15, 10, 101, 101, 76, 101, 101, 101, 82, 101, 101, 95, 29, 101, 101, 41, 101, 65, 58, 101, 101, 79, 101, 101, 20, 101, 1, 1, 101, 101, 101, 101, 101, 59, 4, 101, 33, 18, 101, 101, 101, 95, 101, 101, 78, 101, 2, 37, 101, 101, 71, 7, 20, 101, 101, 26, 8, 101, 23, 5, 101, 55, 101, 101, 5, 10, 101, 101, 101, 3, 101, 101, 101, 15, 101, 24, 14, 101, 101, 101, 41, 101, 101, 18, 101, 101, 101, 101, 101, 57, 29, 101, 101, 11, 101, 12, 101, 101, 101, 101, 101, 48, 66, 68, 101, 101, 47, 101, 101, 101, 101, 56, 20, 18, 4, 101, 20, 101, 101, 101, 101, 101, 101, 101, 94, 9, 1, 6, 15, 66, 4, 101, 101, 101, 101, 101, 17, 101, 101, 101, 101, 101, 1, 101, 2, 101, 101, 97, 1, 101, 82, 83, 98, 55, 1, 11, 5, 15, 101, 20, 101, 43, 65, 96, 56, 5, 12, 101, 8, 13, 76, 55, 101, 31, 7, 96, 101, 53, 101]
        assert list(rankings["rank"].fillna(101)) == desired_ranks

