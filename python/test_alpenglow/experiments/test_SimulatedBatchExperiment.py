import alpenglow as prs
import alpenglow.Getter as rs
import alpenglow.experiments
import pandas as pd
import math


class TestSimulatedBatchExperiment:
    def test_simulatedBatchExperiment(self):
        data = pd.read_csv(
            "python/test_alpenglow/test_data_4",
            sep=' ',
            header=None,
            names=['time', 'user', 'item', 'id', 'score', 'eval']
        )
        sbExperiment = alpenglow.experiments.SimulatedBatchExperiment(
            top_k=100,
            seed=254938879,
            period_length=1000
        )
        rankings = sbExperiment.run(data, verbose=True)
        assert rankings.top_k == 100
        desired_ranks
        desired_ranks = list(map(lambda i: i + 1 if i < 100 else 101, desired_ranks))
        assert list(rankings["rank"].fillna(101)) == desired_ranks