import alpenglow as prs
import alpenglow.Getter as rs
import math
import unittest

class TestNdcgScore(unittest.TestCase):
    def test_ndcgScore(self):
        ranks = [102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 65, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 18, 102, 102, 100, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 100, 100, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 100, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 67, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 100, 102, 102, 102, 102, 100, 102, 100, 102, 102, 102, 102, 58, 100, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 102, 100, 100, 102, 102, 100, 102, 102, 102, 100, 100, 100, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 102, 47, 102, 102, 102, 100, 100, 102, 102, 102, 100, 102, 100, 102, 102, 102, 102, 102, 100, 100, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 100, 102, 54, 100, 102, 100, 100, 102, 102, 100, 100, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 100, 102, 100, 102, 102, 102, 102, 100, 102, 102, 102, 100, 102, 100, 100, 47, 102, 100, 102, 102, 102, 100, 102, 102, 100, 100, 102, 102, 100, 100, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 100, 102, 102, 102, 102, 102, 100, 102, 102, 100, 100, 100, 100, 100, 102, 100, 102, 102, 100, 102, 102, 100, 100, 37, 100, 102, 102, 102, 102, 102, 100, 102, 100, 102, 102, 102, 55, 102, 102, 100, 102, 102, 102, 102, 102, 102, 100, 100, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 22, 102, 100, 100, 100, 102, 102, 102, 102, 102, 100, 102, 100, 102, 100, 102, 102, 102, 102, 102, 100, 102, 102, 102, 100, 102, 102, 100, 102, 100, 100, 102, 100, 102, 102, 100, 100, 100, 102, 102, 100, 100, 100, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 100, 102, 102, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 102, 21, 100, 102, 100, 102, 100, 102, 102, 102, 100, 100, 102, 102, 100, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 102, 100, 100, 102, 102, 102, 100, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 100, 102, 100, 102, 100, 100, 102, 100, 102, 100, 100, 100, 102, 102, 102, 102, 102, 100, 102, 100, 102, 102, 100, 102, 102, 102, 100, 102, 100, 102, 102, 102, 100, 102, 102, 102, 102, 102, 100, 102, 100, 100, 100, 102, 100, 102, 100, 102, 102, 100, 100, 100, 100, 100, 100, 102, 88, 102, 102, 102, 100, 102, 100, 100, 102, 100, 102, 102, 100, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 100, 100, 100, 100, 102, 100, 100, 102, 102, 100, 102, 100, 102, 102, 102, 100, 102, 102, 100, 102, 14, 102, 100, 102, 102, 102, 102, 100, 102, 100, 100, 100, 102, 100, 102, 100, 102, 102, 102, 102, 102, 100, 100, 100, 100, 102, 102, 102, 102, 102, 102, 100, 102, 100, 100, 102, 100, 100, 102, 102, 100, 100, 100, 102, 100, 102, 102, 102, 102, 102, 102, 102, 100, 100, 102, 102, 100, 102, 102, 100, 100, 102, 102, 100, 102, 100, 102, 102, 100]
        facRankings = rs.RankingLogs()
        facRankings.top_k = 100
        logs = []
        for i in ranks:
            l = rs.RankingLog()
            l.rank = i
            l.time = i
            logs.append(l)
        facRankings.logs = logs
        ndcg = prs.NdcgScore(facRankings).cumulative()
        ndcgs = [math.log(2)/math.log(r + 2) if r < 100 else 0 for r in ranks]
        self.assertAlmostEqual(ndcg,sum(ndcgs)/len(ndcgs))
