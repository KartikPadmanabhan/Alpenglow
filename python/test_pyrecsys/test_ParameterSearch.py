import alpenglow as prs
import alpenglow.Getter as rs
import alpenglow.experiments
import pandas as pd
import math
import unittest

class TestParameterSearch(unittest.TestCase):
    def test__getConfigurations(self):
        c = prs.ParameterSearch(None, None)
        c.setParameterValues('negativeRate', [1,2,3])
        c.setParameterValues('learningRate', [0.05, 0.1])

        params = c._getConfigurations()
        self.assertCountEqual(params, [
            {'negativeRate':1,'learningRate':0.05},
            {'negativeRate':1,'learningRate':0.1},
            {'negativeRate':2,'learningRate':0.05},
            {'negativeRate':2,'learningRate':0.1},
            {'negativeRate':3,'learningRate':0.05},
            {'negativeRate':3,'learningRate':0.1},
        ])

    def test_runOneConfig(self):
        data = pd.read_csv(
            "/mnt/idms/recSys/examples/sample_data/online/online_lastfm_10000", 
            sep=' ', 
            header=None, 
            names=['time','user','item','score','eval']
        )
        model = alpenglow.experiments.PopularityModelExperiment(
            topK = 100,
            seed = 254938879
        )
        c = prs.ParameterSearch(model, prs.NdcgScore)
        r = c.run(data)
        ranks = [102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 60, 102, 102, 102, 102, 27, 102, 102, 102, 57, 102, 102, 102, 102, 102, 102, 100, 102, 14, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 56, 102, 102, 102, 24, 102, 102, 102, 102, 102, 24, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 100, 102, 16, 102, 102, 48, 102, 18, 102, 0, 102, 100, 10, 102, 102, 102, 102, 71, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 100, 100, 102, 102, 102, 100, 23, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 61, 102, 100, 102, 102, 102, 102, 66, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 100, 102, 102, 100, 102, 102, 100, 102, 102, 102, 62, 102, 102, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 80, 102, 102, 88, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 38, 100, 100, 102, 102, 102, 102, 102, 102, 102, 100, 100, 26, 100, 12, 102, 102, 102, 75, 102, 12, 102, 100, 100, 102, 102, 9, 102, 102, 100, 102, 102, 100, 100, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 100, 102, 100, 100, 102, 100, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 97, 102, 100, 102, 102, 100, 102, 100, 102, 102, 102, 102, 17, 100, 102, 100, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 100, 5, 102, 100, 102, 102, 102, 102, 102, 1, 100, 102, 102, 100, 102, 102, 102, 100, 100, 100, 102, 102, 100, 27, 102, 102, 102, 100, 102, 102, 102, 100, 102, 102, 102, 100, 100, 102, 102, 102, 100, 102, 4, 100, 102, 102, 102, 102, 100, 38, 102, 100, 102, 100, 102, 100, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 102, 102, 100, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 9, 100, 100, 60, 102, 100, 100, 102, 100, 100, 100, 102, 100, 102, 102, 102, 102, 102, 102, 55, 102, 102, 100, 100, 72, 102, 100, 102, 100, 102, 102, 100, 102, 102, 102, 93, 102, 100, 100, 100, 102, 100, 100, 102, 102, 100, 71, 102, 100, 100, 102, 102, 50, 100, 102, 102, 102, 102, 102, 100, 100, 102, 102, 100, 100, 102, 99, 102, 102, 102, 100, 102, 102, 100, 0, 100, 100, 100, 102, 100, 100, 102, 70, 102, 102, 100, 100, 100, 100, 102, 102, 102, 102, 102, 100, 102, 100, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 100, 102, 100, 99, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 100, 102, 100, 100, 100, 102, 102, 102, 102, 102, 100, 102, 100, 102, 100, 100, 102, 102, 100, 102, 100, 102, 102, 102, 100, 102, 102, 100, 100, 100, 0, 102, 100, 100, 102, 100, 100, 100, 102, 102, 100, 100, 100, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 100, 102, 102, 100, 100, 5, 102, 102, 100, 102, 100, 102, 102, 102, 53, 100, 102, 100, 102, 43, 102, 102, 102, 100, 100, 102, 102, 100, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 102, 4, 100, 102, 102, 102, 100, 100, 102, 102, 51, 102, 102, 100, 102, 102, 102, 94, 84, 100, 102, 100, 65, 102, 100, 102, 32, 100, 100, 102, 100, 102, 102, 102, 100, 47, 100, 100, 102, 100, 102, 102, 102, 100, 102, 84, 102, 102, 102, 100, 100, 100, 102, 102, 102, 100, 102, 100, 100, 100, 102, 100, 102, 100, 102, 100, 100, 100, 100, 100, 100, 17, 102, 100, 102, 102, 102, 100, 102, 17, 1, 102, 100, 102, 102, 100, 102, 100, 102, 97, 102, 26, 100, 102, 102, 100, 32, 100, 100, 100, 102, 100, 100, 102, 102, 19, 102, 100, 102, 102, 102, 100, 100, 102, 100, 102, 100, 102, 100, 102, 102, 102, 102, 52, 102, 100, 100, 100, 102, 100, 102, 100, 102, 102, 100, 102, 102, 100, 100, 100, 100, 100, 102, 102, 102, 100, 102, 100, 102, 100, 100, 100, 100, 97, 102, 102, 87, 100, 90, 102, 100, 102, 102, 102, 102, 102, 102, 102, 23, 100, 102, 102, 100, 102, 102, 100, 100, 102, 102, 100, 102, 36, 102, 102, 100]
        ndcgs = [math.log(2)/math.log(r + 2) if r < 100 else 0 for r in ranks]
        print(r)
        assert r['NdcgScore'][0] - sum(ndcgs)/len(ndcgs) < 0.000000001

    def test_runMultiple(self):
        data = pd.read_csv(
            "/mnt/idms/recSys/examples/sample_data/online/online_lastfm_10000", 
            sep=' ', 
            header=None, 
            names=['time','user','item','score','eval']
        )
        model = alpenglow.experiments.PopularityModelExperiment(
            topK = 100,
            seed = 254938879
        )
        c = prs.ParameterSearch(model, prs.NdcgScore)
        c.setParameterValues('topK', [100,50])
        c.setParameterValues('seed', [254938879, 0])
        r = c.run(data)
        assert len(r) == 4        

        ranks = [102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 60, 102, 102, 102, 102, 27, 102, 102, 102, 57, 102, 102, 102, 102, 102, 102, 100, 102, 14, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 56, 102, 102, 102, 24, 102, 102, 102, 102, 102, 24, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 100, 102, 16, 102, 102, 48, 102, 18, 102, 0, 102, 100, 10, 102, 102, 102, 102, 71, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 100, 100, 102, 102, 102, 100, 23, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 61, 102, 100, 102, 102, 102, 102, 66, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 100, 102, 102, 100, 102, 102, 100, 102, 102, 102, 62, 102, 102, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 80, 102, 102, 88, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 38, 100, 100, 102, 102, 102, 102, 102, 102, 102, 100, 100, 26, 100, 12, 102, 102, 102, 75, 102, 12, 102, 100, 100, 102, 102, 9, 102, 102, 100, 102, 102, 100, 100, 102, 102, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 100, 102, 100, 100, 102, 100, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 102, 100, 102, 97, 102, 100, 102, 102, 100, 102, 100, 102, 102, 102, 102, 17, 100, 102, 100, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 100, 5, 102, 100, 102, 102, 102, 102, 102, 1, 100, 102, 102, 100, 102, 102, 102, 100, 100, 100, 102, 102, 100, 27, 102, 102, 102, 100, 102, 102, 102, 100, 102, 102, 102, 100, 100, 102, 102, 102, 100, 102, 4, 100, 102, 102, 102, 102, 100, 38, 102, 100, 102, 100, 102, 100, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 102, 102, 100, 100, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 100, 9, 100, 100, 60, 102, 100, 100, 102, 100, 100, 100, 102, 100, 102, 102, 102, 102, 102, 102, 55, 102, 102, 100, 100, 72, 102, 100, 102, 100, 102, 102, 100, 102, 102, 102, 93, 102, 100, 100, 100, 102, 100, 100, 102, 102, 100, 71, 102, 100, 100, 102, 102, 50, 100, 102, 102, 102, 102, 102, 100, 100, 102, 102, 100, 100, 102, 99, 102, 102, 102, 100, 102, 102, 100, 0, 100, 100, 100, 102, 100, 100, 102, 70, 102, 102, 100, 100, 100, 100, 102, 102, 102, 102, 102, 100, 102, 100, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 100, 102, 100, 99, 102, 102, 102, 102, 100, 102, 102, 102, 102, 102, 100, 102, 100, 100, 100, 102, 102, 102, 102, 102, 100, 102, 100, 102, 100, 100, 102, 102, 100, 102, 100, 102, 102, 102, 100, 102, 102, 100, 100, 100, 0, 102, 100, 100, 102, 100, 100, 100, 102, 102, 100, 100, 100, 102, 102, 100, 102, 102, 102, 102, 102, 102, 102, 100, 102, 102, 100, 100, 102, 102, 100, 100, 5, 102, 102, 100, 102, 100, 102, 102, 102, 53, 100, 102, 100, 102, 43, 102, 102, 102, 100, 100, 102, 102, 100, 102, 102, 102, 100, 102, 102, 100, 102, 102, 102, 102, 100, 102, 102, 102, 4, 100, 102, 102, 102, 100, 100, 102, 102, 51, 102, 102, 100, 102, 102, 102, 94, 84, 100, 102, 100, 65, 102, 100, 102, 32, 100, 100, 102, 100, 102, 102, 102, 100, 47, 100, 100, 102, 100, 102, 102, 102, 100, 102, 84, 102, 102, 102, 100, 100, 100, 102, 102, 102, 100, 102, 100, 100, 100, 102, 100, 102, 100, 102, 100, 100, 100, 100, 100, 100, 17, 102, 100, 102, 102, 102, 100, 102, 17, 1, 102, 100, 102, 102, 100, 102, 100, 102, 97, 102, 26, 100, 102, 102, 100, 32, 100, 100, 100, 102, 100, 100, 102, 102, 19, 102, 100, 102, 102, 102, 100, 100, 102, 100, 102, 100, 102, 100, 102, 102, 102, 102, 52, 102, 100, 100, 100, 102, 100, 102, 100, 102, 102, 100, 102, 102, 100, 100, 100, 100, 100, 102, 102, 102, 100, 102, 100, 102, 100, 100, 100, 100, 97, 102, 102, 87, 100, 90, 102, 100, 102, 102, 102, 102, 102, 102, 102, 23, 100, 102, 102, 100, 102, 102, 100, 100, 102, 102, 100, 102, 36, 102, 102, 100]
        ndcgs = [math.log(2)/math.log(r + 2) if r < 100 else 0 for r in ranks]

        hit = 0
        for (k, s, v) in r.values:
            if k == 100 and s == 254938879:
                self.assertAlmostEqual(v,sum(ndcgs)/len(ndcgs))
                hit+=1
        assert hit == 1